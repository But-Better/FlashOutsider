
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20 07 00 20 1d 11 00 08 8b 29 00 08 f1 10 00 08      .. .....)......
 8000010:	f1 10 00 08 f1 10 00 08 f1 10 00 08 00 00 00 00     ................
	...
 800002c:	1d 0e 00 08 f1 10 00 08 00 00 00 00 c9 0d 00 08     ................
 800003c:	99 19 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000050:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000060:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000070:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000080:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000090:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000a0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000b0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000c0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000d0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000e0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 80000f0:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000100:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000110:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000120:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000130:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000140:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000150:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000160:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000170:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000180:	cd 0e 00 08 cd 0e 00 08 cd 0e 00 08 cd 0e 00 08     ................
 8000190:	cd 0e 00 08                                         ....

Disassembly of section text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f808 	bl	80001c8 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__udivmoddi4>:
 80001c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	4607      	mov	r7, r0
 80001ce:	468c      	mov	ip, r1
 80001d0:	4608      	mov	r0, r1
 80001d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001d4:	4615      	mov	r5, r2
 80001d6:	463c      	mov	r4, r7
 80001d8:	4619      	mov	r1, r3
 80001da:	2b00      	cmp	r3, #0
 80001dc:	f040 80c6 	bne.w	800036c <__udivmoddi4+0x1a4>
 80001e0:	4282      	cmp	r2, r0
 80001e2:	fab2 f782 	clz	r7, r2
 80001e6:	d946      	bls.n	8000276 <__udivmoddi4+0xae>
 80001e8:	b14f      	cbz	r7, 80001fe <__udivmoddi4+0x36>
 80001ea:	f1c7 0e20 	rsb	lr, r7, #32
 80001ee:	fa24 fe0e 	lsr.w	lr, r4, lr
 80001f2:	fa00 f307 	lsl.w	r3, r0, r7
 80001f6:	40bd      	lsls	r5, r7
 80001f8:	ea4e 0c03 	orr.w	ip, lr, r3
 80001fc:	40bc      	lsls	r4, r7
 80001fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000202:	fa1f fe85 	uxth.w	lr, r5
 8000206:	fbbc f9f8 	udiv	r9, ip, r8
 800020a:	0c22      	lsrs	r2, r4, #16
 800020c:	fb08 c319 	mls	r3, r8, r9, ip
 8000210:	fb09 fa0e 	mul.w	sl, r9, lr
 8000214:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000218:	459a      	cmp	sl, r3
 800021a:	d928      	bls.n	800026e <__udivmoddi4+0xa6>
 800021c:	18eb      	adds	r3, r5, r3
 800021e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000222:	d204      	bcs.n	800022e <__udivmoddi4+0x66>
 8000224:	459a      	cmp	sl, r3
 8000226:	d902      	bls.n	800022e <__udivmoddi4+0x66>
 8000228:	f1a9 0002 	sub.w	r0, r9, #2
 800022c:	442b      	add	r3, r5
 800022e:	eba3 030a 	sub.w	r3, r3, sl
 8000232:	b2a4      	uxth	r4, r4
 8000234:	fbb3 f2f8 	udiv	r2, r3, r8
 8000238:	fb08 3312 	mls	r3, r8, r2, r3
 800023c:	fb02 fe0e 	mul.w	lr, r2, lr
 8000240:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000244:	45a6      	cmp	lr, r4
 8000246:	d914      	bls.n	8000272 <__udivmoddi4+0xaa>
 8000248:	192c      	adds	r4, r5, r4
 800024a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800024e:	d203      	bcs.n	8000258 <__udivmoddi4+0x90>
 8000250:	45a6      	cmp	lr, r4
 8000252:	d901      	bls.n	8000258 <__udivmoddi4+0x90>
 8000254:	1e93      	subs	r3, r2, #2
 8000256:	442c      	add	r4, r5
 8000258:	eba4 040e 	sub.w	r4, r4, lr
 800025c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000260:	b11e      	cbz	r6, 800026a <__udivmoddi4+0xa2>
 8000262:	40fc      	lsrs	r4, r7
 8000264:	2300      	movs	r3, #0
 8000266:	6034      	str	r4, [r6, #0]
 8000268:	6073      	str	r3, [r6, #4]
 800026a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026e:	4648      	mov	r0, r9
 8000270:	e7dd      	b.n	800022e <__udivmoddi4+0x66>
 8000272:	4613      	mov	r3, r2
 8000274:	e7f0      	b.n	8000258 <__udivmoddi4+0x90>
 8000276:	b902      	cbnz	r2, 800027a <__udivmoddi4+0xb2>
 8000278:	deff      	udf	#255	; 0xff
 800027a:	bb87      	cbnz	r7, 80002de <__udivmoddi4+0x116>
 800027c:	1a83      	subs	r3, r0, r2
 800027e:	2101      	movs	r1, #1
 8000280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000284:	b2aa      	uxth	r2, r5
 8000286:	fbb3 fcfe 	udiv	ip, r3, lr
 800028a:	0c20      	lsrs	r0, r4, #16
 800028c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000290:	fb0c f802 	mul.w	r8, ip, r2
 8000294:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000298:	4598      	cmp	r8, r3
 800029a:	d963      	bls.n	8000364 <__udivmoddi4+0x19c>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002a2:	d204      	bcs.n	80002ae <__udivmoddi4+0xe6>
 80002a4:	4598      	cmp	r8, r3
 80002a6:	d902      	bls.n	80002ae <__udivmoddi4+0xe6>
 80002a8:	f1ac 0002 	sub.w	r0, ip, #2
 80002ac:	442b      	add	r3, r5
 80002ae:	eba3 0308 	sub.w	r3, r3, r8
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002bc:	fb0c f202 	mul.w	r2, ip, r2
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	42a2      	cmp	r2, r4
 80002c6:	d94f      	bls.n	8000368 <__udivmoddi4+0x1a0>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002ce:	d204      	bcs.n	80002da <__udivmoddi4+0x112>
 80002d0:	42a2      	cmp	r2, r4
 80002d2:	d902      	bls.n	80002da <__udivmoddi4+0x112>
 80002d4:	f1ac 0302 	sub.w	r3, ip, #2
 80002d8:	442c      	add	r4, r5
 80002da:	1aa4      	subs	r4, r4, r2
 80002dc:	e7be      	b.n	800025c <__udivmoddi4+0x94>
 80002de:	f1c7 0c20 	rsb	ip, r7, #32
 80002e2:	fa20 f80c 	lsr.w	r8, r0, ip
 80002e6:	fa00 f307 	lsl.w	r3, r0, r7
 80002ea:	fa24 fc0c 	lsr.w	ip, r4, ip
 80002ee:	40bd      	lsls	r5, r7
 80002f0:	ea4c 0203 	orr.w	r2, ip, r3
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	b2ab      	uxth	r3, r5
 80002fa:	fbb8 fcfe 	udiv	ip, r8, lr
 80002fe:	0c11      	lsrs	r1, r2, #16
 8000300:	fb0e 801c 	mls	r0, lr, ip, r8
 8000304:	fb0c f903 	mul.w	r9, ip, r3
 8000308:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 800030c:	4581      	cmp	r9, r0
 800030e:	fa04 f407 	lsl.w	r4, r4, r7
 8000312:	d923      	bls.n	800035c <__udivmoddi4+0x194>
 8000314:	1828      	adds	r0, r5, r0
 8000316:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800031a:	d204      	bcs.n	8000326 <__udivmoddi4+0x15e>
 800031c:	4581      	cmp	r9, r0
 800031e:	d902      	bls.n	8000326 <__udivmoddi4+0x15e>
 8000320:	f1ac 0102 	sub.w	r1, ip, #2
 8000324:	4428      	add	r0, r5
 8000326:	eba0 0009 	sub.w	r0, r0, r9
 800032a:	b292      	uxth	r2, r2
 800032c:	fbb0 fcfe 	udiv	ip, r0, lr
 8000330:	fb0e 001c 	mls	r0, lr, ip, r0
 8000334:	fb0c f803 	mul.w	r8, ip, r3
 8000338:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 800033c:	4598      	cmp	r8, r3
 800033e:	d90f      	bls.n	8000360 <__udivmoddi4+0x198>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000346:	d204      	bcs.n	8000352 <__udivmoddi4+0x18a>
 8000348:	4598      	cmp	r8, r3
 800034a:	d902      	bls.n	8000352 <__udivmoddi4+0x18a>
 800034c:	f1ac 0202 	sub.w	r2, ip, #2
 8000350:	442b      	add	r3, r5
 8000352:	eba3 0308 	sub.w	r3, r3, r8
 8000356:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800035a:	e791      	b.n	8000280 <__udivmoddi4+0xb8>
 800035c:	4661      	mov	r1, ip
 800035e:	e7e2      	b.n	8000326 <__udivmoddi4+0x15e>
 8000360:	4662      	mov	r2, ip
 8000362:	e7f6      	b.n	8000352 <__udivmoddi4+0x18a>
 8000364:	4660      	mov	r0, ip
 8000366:	e7a2      	b.n	80002ae <__udivmoddi4+0xe6>
 8000368:	4663      	mov	r3, ip
 800036a:	e7b6      	b.n	80002da <__udivmoddi4+0x112>
 800036c:	4283      	cmp	r3, r0
 800036e:	d905      	bls.n	800037c <__udivmoddi4+0x1b4>
 8000370:	b10e      	cbz	r6, 8000376 <__udivmoddi4+0x1ae>
 8000372:	e9c6 7000 	strd	r7, r0, [r6]
 8000376:	2100      	movs	r1, #0
 8000378:	4608      	mov	r0, r1
 800037a:	e776      	b.n	800026a <__udivmoddi4+0xa2>
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	b981      	cbnz	r1, 80003a4 <__udivmoddi4+0x1dc>
 8000382:	4283      	cmp	r3, r0
 8000384:	d301      	bcc.n	800038a <__udivmoddi4+0x1c2>
 8000386:	42ba      	cmp	r2, r7
 8000388:	d80a      	bhi.n	80003a0 <__udivmoddi4+0x1d8>
 800038a:	1abc      	subs	r4, r7, r2
 800038c:	eb60 0303 	sbc.w	r3, r0, r3
 8000390:	2001      	movs	r0, #1
 8000392:	469c      	mov	ip, r3
 8000394:	2e00      	cmp	r6, #0
 8000396:	d068      	beq.n	800046a <__udivmoddi4+0x2a2>
 8000398:	e9c6 4c00 	strd	r4, ip, [r6]
 800039c:	2100      	movs	r1, #0
 800039e:	e764      	b.n	800026a <__udivmoddi4+0xa2>
 80003a0:	4608      	mov	r0, r1
 80003a2:	e7f7      	b.n	8000394 <__udivmoddi4+0x1cc>
 80003a4:	f1c1 0c20 	rsb	ip, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 f40c 	lsr.w	r4, r2, ip
 80003ae:	431c      	orrs	r4, r3
 80003b0:	fa02 f501 	lsl.w	r5, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	fa27 f20c 	lsr.w	r2, r7, ip
 80003bc:	fa20 fb0c 	lsr.w	fp, r0, ip
 80003c0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c4:	4313      	orrs	r3, r2
 80003c6:	fbbb f8f9 	udiv	r8, fp, r9
 80003ca:	fa1f fe84 	uxth.w	lr, r4
 80003ce:	fb09 bb18 	mls	fp, r9, r8, fp
 80003d2:	0c1a      	lsrs	r2, r3, #16
 80003d4:	fb08 fa0e 	mul.w	sl, r8, lr
 80003d8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80003dc:	4592      	cmp	sl, r2
 80003de:	fa07 f701 	lsl.w	r7, r7, r1
 80003e2:	d93e      	bls.n	8000462 <__udivmoddi4+0x29a>
 80003e4:	18a2      	adds	r2, r4, r2
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d204      	bcs.n	80003f6 <__udivmoddi4+0x22e>
 80003ec:	4592      	cmp	sl, r2
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x22e>
 80003f0:	f1a8 0002 	sub.w	r0, r8, #2
 80003f4:	4422      	add	r2, r4
 80003f6:	eba2 020a 	sub.w	r2, r2, sl
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	fbb2 f8f9 	udiv	r8, r2, r9
 8000400:	fb09 2218 	mls	r2, r9, r8, r2
 8000404:	fb08 fe0e 	mul.w	lr, r8, lr
 8000408:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800040c:	4596      	cmp	lr, r2
 800040e:	d92a      	bls.n	8000466 <__udivmoddi4+0x29e>
 8000410:	18a2      	adds	r2, r4, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000416:	d204      	bcs.n	8000422 <__udivmoddi4+0x25a>
 8000418:	4596      	cmp	lr, r2
 800041a:	d902      	bls.n	8000422 <__udivmoddi4+0x25a>
 800041c:	f1a8 0302 	sub.w	r3, r8, #2
 8000420:	4422      	add	r2, r4
 8000422:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000426:	fba0 9305 	umull	r9, r3, r0, r5
 800042a:	eba2 020e 	sub.w	r2, r2, lr
 800042e:	429a      	cmp	r2, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	4698      	mov	r8, r3
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0x274>
 8000436:	d106      	bne.n	8000446 <__udivmoddi4+0x27e>
 8000438:	454f      	cmp	r7, r9
 800043a:	d204      	bcs.n	8000446 <__udivmoddi4+0x27e>
 800043c:	ebb9 0e05 	subs.w	lr, r9, r5
 8000440:	eb63 0804 	sbc.w	r8, r3, r4
 8000444:	3801      	subs	r0, #1
 8000446:	b186      	cbz	r6, 800046a <__udivmoddi4+0x2a2>
 8000448:	ebb7 030e 	subs.w	r3, r7, lr
 800044c:	eb62 0708 	sbc.w	r7, r2, r8
 8000450:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000454:	40cb      	lsrs	r3, r1
 8000456:	ea4c 0303 	orr.w	r3, ip, r3
 800045a:	40cf      	lsrs	r7, r1
 800045c:	e9c6 3700 	strd	r3, r7, [r6]
 8000460:	e79c      	b.n	800039c <__udivmoddi4+0x1d4>
 8000462:	4640      	mov	r0, r8
 8000464:	e7c7      	b.n	80003f6 <__udivmoddi4+0x22e>
 8000466:	4643      	mov	r3, r8
 8000468:	e7db      	b.n	8000422 <__udivmoddi4+0x25a>
 800046a:	4631      	mov	r1, r6
 800046c:	e6fd      	b.n	800026a <__udivmoddi4+0xa2>
	...

08000470 <main>:
#define PIN	0
#define FLAGS	0
#endif

void main(void)
{
 8000470:	b570      	push	{r4, r5, r6, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000472:	4816      	ldr	r0, [pc, #88]	; (80004cc <main+0x5c>)
 8000474:	f001 fc82 	bl	8001d7c <z_impl_device_get_binding>
	const struct device *dev;
	bool led_is_on = true;
	int ret;

	dev = device_get_binding(LED0);
	if (dev == NULL) {
 8000478:	4604      	mov	r4, r0
 800047a:	b328      	cbz	r0, 80004c8 <main+0x58>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 800047c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 800047e:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8000480:	6813      	ldr	r3, [r2, #0]
 8000482:	f023 0320 	bic.w	r3, r3, #32
 8000486:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
 8000488:	680b      	ldr	r3, [r1, #0]
 800048a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800048e:	2105      	movs	r1, #5
 8000490:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
 8000492:	2800      	cmp	r0, #0
 8000494:	db18      	blt.n	80004c8 <main+0x58>
	bool led_is_on = true;
 8000496:	2501      	movs	r5, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8000498:	6923      	ldr	r3, [r4, #16]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f085 0601 	eor.w	r6, r5, #1
 80004a0:	f013 0f20 	tst.w	r3, #32
		value = (value != 0) ? 0 : 1;
 80004a4:	bf18      	it	ne
 80004a6:	b2f5      	uxtbne	r5, r6
	if (value != 0)	{
 80004a8:	b15d      	cbz	r5, 80004c2 <main+0x52>
	return api->port_set_bits_raw(port, pins);
 80004aa:	68a3      	ldr	r3, [r4, #8]
 80004ac:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80004ae:	2120      	movs	r1, #32
 80004b0:	4620      	mov	r0, r4
 80004b2:	4798      	blx	r3
		return;
	}

	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;
 80004b4:	b2f5      	uxtb	r5, r6
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80004b6:	2100      	movs	r1, #0
 80004b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80004bc:	f002 f812 	bl	80024e4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80004c0:	e7ea      	b.n	8000498 <main+0x28>
 80004c2:	68a3      	ldr	r3, [r4, #8]
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	e7f2      	b.n	80004ae <main+0x3e>
		k_msleep(SLEEP_TIME_MS);
	}
}
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	bf00      	nop
 80004cc:	0800373a 	.word	0x0800373a

080004d0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80004d0:	680b      	ldr	r3, [r1, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80004d6:	4b01      	ldr	r3, [pc, #4]	; (80004dc <char_out+0xc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4718      	bx	r3
 80004dc:	20000000 	.word	0x20000000

080004e0 <__printk_hook_install>:
	_char_out = fn;
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <__printk_hook_install+0x8>)
 80004e2:	6018      	str	r0, [r3, #0]
}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000000 	.word	0x20000000

080004ec <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80004ec:	b507      	push	{r0, r1, r2, lr}
 80004ee:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80004f0:	2100      	movs	r1, #0
{
 80004f2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80004f4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <vprintk+0x18>)
 80004f8:	a901      	add	r1, sp, #4
 80004fa:	f000 f805 	bl	8000508 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80004fe:	b003      	add	sp, #12
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
 8000504:	080004d1 	.word	0x080004d1

08000508 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800050c:	b091      	sub	sp, #68	; 0x44
 800050e:	468b      	mov	fp, r1
 8000510:	9002      	str	r0, [sp, #8]
 8000512:	4692      	mov	sl, r2
 8000514:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000516:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000518:	f89a 0000 	ldrb.w	r0, [sl]
 800051c:	b908      	cbnz	r0, 8000522 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800051e:	4628      	mov	r0, r5
 8000520:	e35f      	b.n	8000be2 <cbvprintf+0x6da>
		if (*fp != '%') {
 8000522:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000524:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000528:	d007      	beq.n	800053a <cbvprintf+0x32>
			OUTC('%');
 800052a:	9b02      	ldr	r3, [sp, #8]
 800052c:	4659      	mov	r1, fp
 800052e:	4798      	blx	r3
 8000530:	2800      	cmp	r0, #0
 8000532:	f2c0 8356 	blt.w	8000be2 <cbvprintf+0x6da>
 8000536:	3501      	adds	r5, #1
			break;
 8000538:	e212      	b.n	8000960 <cbvprintf+0x458>
		} state = {
 800053a:	2218      	movs	r2, #24
 800053c:	2100      	movs	r1, #0
 800053e:	a80a      	add	r0, sp, #40	; 0x28
 8000540:	f002 fa51 	bl	80029e6 <memset>
	if (*sp == '%') {
 8000544:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000548:	2b25      	cmp	r3, #37	; 0x25
 800054a:	d078      	beq.n	800063e <cbvprintf+0x136>
 800054c:	2200      	movs	r2, #0
 800054e:	4610      	mov	r0, r2
 8000550:	4696      	mov	lr, r2
 8000552:	4694      	mov	ip, r2
 8000554:	4616      	mov	r6, r2
 8000556:	4639      	mov	r1, r7
		switch (*sp) {
 8000558:	f817 3b01 	ldrb.w	r3, [r7], #1
 800055c:	2b2b      	cmp	r3, #43	; 0x2b
 800055e:	f000 809d 	beq.w	800069c <cbvprintf+0x194>
 8000562:	f200 8094 	bhi.w	800068e <cbvprintf+0x186>
 8000566:	2b20      	cmp	r3, #32
 8000568:	f000 809b 	beq.w	80006a2 <cbvprintf+0x19a>
 800056c:	2b23      	cmp	r3, #35	; 0x23
 800056e:	f000 809b 	beq.w	80006a8 <cbvprintf+0x1a0>
 8000572:	b12e      	cbz	r6, 8000580 <cbvprintf+0x78>
 8000574:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000578:	f046 0604 	orr.w	r6, r6, #4
 800057c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000580:	f1bc 0f00 	cmp.w	ip, #0
 8000584:	d005      	beq.n	8000592 <cbvprintf+0x8a>
 8000586:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800058a:	f046 0608 	orr.w	r6, r6, #8
 800058e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000592:	f1be 0f00 	cmp.w	lr, #0
 8000596:	d005      	beq.n	80005a4 <cbvprintf+0x9c>
 8000598:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800059c:	f046 0610 	orr.w	r6, r6, #16
 80005a0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80005a4:	b128      	cbz	r0, 80005b2 <cbvprintf+0xaa>
 80005a6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80005aa:	f040 0020 	orr.w	r0, r0, #32
 80005ae:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80005b2:	b12a      	cbz	r2, 80005c0 <cbvprintf+0xb8>
 80005b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80005b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 80005c0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80005c4:	f002 0044 	and.w	r0, r2, #68	; 0x44
 80005c8:	2844      	cmp	r0, #68	; 0x44
 80005ca:	d103      	bne.n	80005d4 <cbvprintf+0xcc>
		conv->flag_zero = false;
 80005cc:	f36f 1286 	bfc	r2, #6, #1
 80005d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 80005d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80005d8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 80005da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80005e2:	d17b      	bne.n	80006dc <cbvprintf+0x1d4>
		conv->width_star = true;
 80005e4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80005e8:	f042 0201 	orr.w	r2, r2, #1
			++sp;
 80005ec:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80005ee:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	2a2e      	cmp	r2, #46	; 0x2e
 80005f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80005fa:	bf0c      	ite	eq
 80005fc:	2101      	moveq	r1, #1
 80005fe:	2100      	movne	r1, #0
 8000600:	f361 0241 	bfi	r2, r1, #1, #1
 8000604:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8000608:	d174      	bne.n	80006f4 <cbvprintf+0x1ec>
	if (*sp == '*') {
 800060a:	785a      	ldrb	r2, [r3, #1]
 800060c:	2a2a      	cmp	r2, #42	; 0x2a
 800060e:	d06a      	beq.n	80006e6 <cbvprintf+0x1de>
	++sp;
 8000610:	3301      	adds	r3, #1
	size_t val = 0;
 8000612:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000614:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000616:	4618      	mov	r0, r3
 8000618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800061c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000620:	2f09      	cmp	r7, #9
 8000622:	f240 808e 	bls.w	8000742 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000626:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 800062a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 800062c:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000630:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 8000634:	f361 0241 	bfi	r2, r1, #1, #1
 8000638:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 800063c:	e05a      	b.n	80006f4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 800063e:	f10a 0702 	add.w	r7, sl, #2
 8000642:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 8000646:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800064a:	07d9      	lsls	r1, r3, #31
 800064c:	f140 8149 	bpl.w	80008e2 <cbvprintf+0x3da>
			width = va_arg(ap, int);
 8000650:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 8000654:	f1b9 0f00 	cmp.w	r9, #0
 8000658:	da07      	bge.n	800066a <cbvprintf+0x162>
				conv->flag_dash = true;
 800065a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800065e:	f042 0204 	orr.w	r2, r2, #4
 8000662:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 8000666:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 800066a:	075a      	lsls	r2, r3, #29
 800066c:	f140 8142 	bpl.w	80008f4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 8000670:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000674:	f1b8 0f00 	cmp.w	r8, #0
 8000678:	f280 8141 	bge.w	80008fe <cbvprintf+0x3f6>
				conv->prec_present = false;
 800067c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000680:	f36f 0341 	bfc	r3, #1, #1
 8000684:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000688:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800068c:	e137      	b.n	80008fe <cbvprintf+0x3f6>
		switch (*sp) {
 800068e:	2b2d      	cmp	r3, #45	; 0x2d
 8000690:	d00c      	beq.n	80006ac <cbvprintf+0x1a4>
 8000692:	2b30      	cmp	r3, #48	; 0x30
 8000694:	f47f af6d 	bne.w	8000572 <cbvprintf+0x6a>
			conv->flag_zero = true;
 8000698:	2201      	movs	r2, #1
	} while (loop);
 800069a:	e75c      	b.n	8000556 <cbvprintf+0x4e>
			conv->flag_plus = true;
 800069c:	f04f 0c01 	mov.w	ip, #1
 80006a0:	e759      	b.n	8000556 <cbvprintf+0x4e>
			conv->flag_space = true;
 80006a2:	f04f 0e01 	mov.w	lr, #1
 80006a6:	e756      	b.n	8000556 <cbvprintf+0x4e>
			conv->flag_hash = true;
 80006a8:	2001      	movs	r0, #1
 80006aa:	e754      	b.n	8000556 <cbvprintf+0x4e>
		switch (*sp) {
 80006ac:	2601      	movs	r6, #1
 80006ae:	e752      	b.n	8000556 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 80006b0:	fb0c 0202 	mla	r2, ip, r2, r0
 80006b4:	3a30      	subs	r2, #48	; 0x30
 80006b6:	4633      	mov	r3, r6
 80006b8:	461e      	mov	r6, r3
 80006ba:	f816 0b01 	ldrb.w	r0, [r6], #1
 80006be:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006c2:	2f09      	cmp	r7, #9
 80006c4:	d9f4      	bls.n	80006b0 <cbvprintf+0x1a8>
	if (sp != wp) {
 80006c6:	4299      	cmp	r1, r3
 80006c8:	d093      	beq.n	80005f2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80006ca:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 80006ce:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 80006d0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80006d2:	f362 0141 	bfi	r1, r2, #1, #1
 80006d6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80006da:	e78a      	b.n	80005f2 <cbvprintf+0xea>
 80006dc:	460b      	mov	r3, r1
	size_t val = 0;
 80006de:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80006e0:	f04f 0c0a 	mov.w	ip, #10
 80006e4:	e7e8      	b.n	80006b8 <cbvprintf+0x1b0>
		conv->prec_star = true;
 80006e6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80006ea:	f042 0204 	orr.w	r2, r2, #4
 80006ee:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 80006f2:	3302      	adds	r3, #2
	switch (*sp) {
 80006f4:	461f      	mov	r7, r3
 80006f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80006fa:	2a6c      	cmp	r2, #108	; 0x6c
 80006fc:	d041      	beq.n	8000782 <cbvprintf+0x27a>
 80006fe:	d825      	bhi.n	800074c <cbvprintf+0x244>
 8000700:	2a68      	cmp	r2, #104	; 0x68
 8000702:	d02b      	beq.n	800075c <cbvprintf+0x254>
 8000704:	2a6a      	cmp	r2, #106	; 0x6a
 8000706:	d046      	beq.n	8000796 <cbvprintf+0x28e>
 8000708:	2a4c      	cmp	r2, #76	; 0x4c
 800070a:	d04c      	beq.n	80007a6 <cbvprintf+0x29e>
 800070c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 800070e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000712:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 8000716:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 800071a:	2a78      	cmp	r2, #120	; 0x78
 800071c:	f200 80d9 	bhi.w	80008d2 <cbvprintf+0x3ca>
 8000720:	2a57      	cmp	r2, #87	; 0x57
 8000722:	d84d      	bhi.n	80007c0 <cbvprintf+0x2b8>
 8000724:	2a41      	cmp	r2, #65	; 0x41
 8000726:	d003      	beq.n	8000730 <cbvprintf+0x228>
 8000728:	3a45      	subs	r2, #69	; 0x45
 800072a:	2a02      	cmp	r2, #2
 800072c:	f200 80d1 	bhi.w	80008d2 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000730:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000734:	2204      	movs	r2, #4
 8000736:	f362 0302 	bfi	r3, r2, #0, #3
 800073a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 800073e:	2301      	movs	r3, #1
			break;
 8000740:	e09e      	b.n	8000880 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 8000742:	fb06 2101 	mla	r1, r6, r1, r2
 8000746:	3930      	subs	r1, #48	; 0x30
 8000748:	4603      	mov	r3, r0
 800074a:	e764      	b.n	8000616 <cbvprintf+0x10e>
	switch (*sp) {
 800074c:	2a74      	cmp	r2, #116	; 0x74
 800074e:	d026      	beq.n	800079e <cbvprintf+0x296>
 8000750:	2a7a      	cmp	r2, #122	; 0x7a
 8000752:	d1db      	bne.n	800070c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 8000754:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000758:	2206      	movs	r2, #6
 800075a:	e00d      	b.n	8000778 <cbvprintf+0x270>
		if (*++sp == 'h') {
 800075c:	785a      	ldrb	r2, [r3, #1]
 800075e:	2a68      	cmp	r2, #104	; 0x68
 8000760:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000764:	d106      	bne.n	8000774 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 8000766:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000768:	f361 02c6 	bfi	r2, r1, #3, #4
 800076c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000770:	1c9f      	adds	r7, r3, #2
 8000772:	e7cc      	b.n	800070e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 8000774:	4613      	mov	r3, r2
 8000776:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8000778:	f362 03c6 	bfi	r3, r2, #3, #4
 800077c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000780:	e7c5      	b.n	800070e <cbvprintf+0x206>
		if (*++sp == 'l') {
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	2a6c      	cmp	r2, #108	; 0x6c
 8000786:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800078a:	d101      	bne.n	8000790 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 800078c:	2104      	movs	r1, #4
 800078e:	e7eb      	b.n	8000768 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 8000790:	4613      	mov	r3, r2
 8000792:	2203      	movs	r2, #3
 8000794:	e7f0      	b.n	8000778 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 8000796:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800079a:	2205      	movs	r2, #5
 800079c:	e7ec      	b.n	8000778 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 800079e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007a2:	2207      	movs	r2, #7
 80007a4:	e7e8      	b.n	8000778 <cbvprintf+0x270>
		conv->unsupported = true;
 80007a6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80007aa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80007ae:	f023 0302 	bic.w	r3, r3, #2
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 80007be:	e7a6      	b.n	800070e <cbvprintf+0x206>
	switch (conv->specifier) {
 80007c0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80007c4:	2920      	cmp	r1, #32
 80007c6:	f200 8084 	bhi.w	80008d2 <cbvprintf+0x3ca>
 80007ca:	a001      	add	r0, pc, #4	; (adr r0, 80007d0 <cbvprintf+0x2c8>)
 80007cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80007d0:	08000895 	.word	0x08000895
 80007d4:	080008d3 	.word	0x080008d3
 80007d8:	080008d3 	.word	0x080008d3
 80007dc:	080008d3 	.word	0x080008d3
 80007e0:	080008d3 	.word	0x080008d3
 80007e4:	080008d3 	.word	0x080008d3
 80007e8:	080008d3 	.word	0x080008d3
 80007ec:	080008d3 	.word	0x080008d3
 80007f0:	080008d3 	.word	0x080008d3
 80007f4:	08000731 	.word	0x08000731
 80007f8:	080008d3 	.word	0x080008d3
 80007fc:	08000895 	.word	0x08000895
 8000800:	08000855 	.word	0x08000855
 8000804:	08000731 	.word	0x08000731
 8000808:	08000731 	.word	0x08000731
 800080c:	08000731 	.word	0x08000731
 8000810:	080008d3 	.word	0x080008d3
 8000814:	08000855 	.word	0x08000855
 8000818:	080008d3 	.word	0x080008d3
 800081c:	080008d3 	.word	0x080008d3
 8000820:	080008d3 	.word	0x080008d3
 8000824:	080008d3 	.word	0x080008d3
 8000828:	0800089d 	.word	0x0800089d
 800082c:	08000895 	.word	0x08000895
 8000830:	080008b9 	.word	0x080008b9
 8000834:	080008d3 	.word	0x080008d3
 8000838:	080008d3 	.word	0x080008d3
 800083c:	080008b9 	.word	0x080008b9
 8000840:	080008d3 	.word	0x080008d3
 8000844:	08000895 	.word	0x08000895
 8000848:	080008d3 	.word	0x080008d3
 800084c:	080008d3 	.word	0x080008d3
 8000850:	08000895 	.word	0x08000895
		conv->specifier_cat = SPECIFIER_SINT;
 8000854:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000858:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 800085a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 800085e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000862:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000864:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8000868:	bf02      	ittt	eq
 800086a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 800086e:	f041 0101 	orreq.w	r1, r1, #1
 8000872:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 8000876:	2a63      	cmp	r2, #99	; 0x63
 8000878:	d131      	bne.n	80008de <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800087a:	3b00      	subs	r3, #0
 800087c:	bf18      	it	ne
 800087e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000880:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000884:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000888:	430b      	orrs	r3, r1
 800088a:	f363 0241 	bfi	r2, r3, #1, #1
 800088e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000892:	e6d8      	b.n	8000646 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8000894:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000898:	2002      	movs	r0, #2
 800089a:	e7de      	b.n	800085a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 800089c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008a0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80008a4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 80008a8:	2103      	movs	r1, #3
 80008aa:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008ae:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 80008b0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008b4:	4143      	adcs	r3, r0
 80008b6:	e7e3      	b.n	8000880 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 80008b8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80008bc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 80008be:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80008c2:	f361 0202 	bfi	r2, r1, #0, #3
 80008c6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	e7d6      	b.n	8000880 <cbvprintf+0x378>
		conv->invalid = true;
 80008d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 80008de:	2300      	movs	r3, #0
 80008e0:	e7ce      	b.n	8000880 <cbvprintf+0x378>
		} else if (conv->width_present) {
 80008e2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 80008e6:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80008e8:	bfb4      	ite	lt
 80008ea:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 80008ee:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
 80008f2:	e6ba      	b.n	800066a <cbvprintf+0x162>
		} else if (conv->prec_present) {
 80008f4:	079b      	lsls	r3, r3, #30
 80008f6:	f57f aec7 	bpl.w	8000688 <cbvprintf+0x180>
			precision = conv->prec_value;
 80008fa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 80008fe:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000902:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000904:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000908:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 800090c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000910:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000912:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000916:	d138      	bne.n	800098a <cbvprintf+0x482>
			switch (length_mod) {
 8000918:	1ecb      	subs	r3, r1, #3
 800091a:	2b04      	cmp	r3, #4
 800091c:	d822      	bhi.n	8000964 <cbvprintf+0x45c>
 800091e:	e8df f003 	tbb	[pc, r3]
 8000922:	0903      	.short	0x0903
 8000924:	2109      	.short	0x2109
 8000926:	21          	.byte	0x21
 8000927:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000928:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 800092c:	17da      	asrs	r2, r3, #31
 800092e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8000932:	e006      	b.n	8000942 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 8000934:	3407      	adds	r4, #7
 8000936:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 800093a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800093e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000942:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000946:	f013 0603 	ands.w	r6, r3, #3
 800094a:	d056      	beq.n	80009fa <cbvprintf+0x4f2>
			OUTS(sp, fp);
 800094c:	9802      	ldr	r0, [sp, #8]
 800094e:	463b      	mov	r3, r7
 8000950:	4652      	mov	r2, sl
 8000952:	4659      	mov	r1, fp
 8000954:	f001 fff6 	bl	8002944 <outs>
 8000958:	2800      	cmp	r0, #0
 800095a:	f2c0 8142 	blt.w	8000be2 <cbvprintf+0x6da>
 800095e:	4405      	add	r5, r0
			continue;
 8000960:	46ba      	mov	sl, r7
 8000962:	e5d9      	b.n	8000518 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000964:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000968:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800096a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800096e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000972:	d105      	bne.n	8000980 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 8000974:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000978:	930a      	str	r3, [sp, #40]	; 0x28
 800097a:	2300      	movs	r3, #0
 800097c:	930b      	str	r3, [sp, #44]	; 0x2c
 800097e:	e7e0      	b.n	8000942 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000980:	2902      	cmp	r1, #2
 8000982:	d1de      	bne.n	8000942 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 8000984:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000988:	e7d0      	b.n	800092c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 800098a:	2b02      	cmp	r3, #2
 800098c:	d123      	bne.n	80009d6 <cbvprintf+0x4ce>
			switch (length_mod) {
 800098e:	1ecb      	subs	r3, r1, #3
 8000990:	2b04      	cmp	r3, #4
 8000992:	d813      	bhi.n	80009bc <cbvprintf+0x4b4>
 8000994:	e8df f003 	tbb	[pc, r3]
 8000998:	120a0a03 	.word	0x120a0a03
 800099c:	12          	.byte	0x12
 800099d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 800099e:	6822      	ldr	r2, [r4, #0]
 80009a0:	920a      	str	r2, [sp, #40]	; 0x28
 80009a2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 80009a4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80009a6:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 80009a8:	4604      	mov	r4, r0
 80009aa:	e7ca      	b.n	8000942 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 80009ac:	1de0      	adds	r0, r4, #7
 80009ae:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 80009b2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 80009b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 80009ba:	e7f5      	b.n	80009a8 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 80009bc:	f854 3b04 	ldr.w	r3, [r4], #4
 80009c0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 80009c2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80009ca:	d0d3      	beq.n	8000974 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 80009cc:	2902      	cmp	r1, #2
 80009ce:	d1b8      	bne.n	8000942 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 80009d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80009d4:	e7d0      	b.n	8000978 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d109      	bne.n	80009ee <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
 80009da:	1de3      	adds	r3, r4, #7
 80009dc:	f023 0307 	bic.w	r3, r3, #7
 80009e0:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80009ec:	e7a9      	b.n	8000942 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80009ee:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 80009f0:	bf04      	itt	eq
 80009f2:	f854 3b04 	ldreq.w	r3, [r4], #4
 80009f6:	930a      	streq	r3, [sp, #40]	; 0x28
 80009f8:	e7a3      	b.n	8000942 <cbvprintf+0x43a>
		switch (conv->specifier) {
 80009fa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80009fe:	2878      	cmp	r0, #120	; 0x78
 8000a00:	d8ae      	bhi.n	8000960 <cbvprintf+0x458>
 8000a02:	2862      	cmp	r0, #98	; 0x62
 8000a04:	d822      	bhi.n	8000a4c <cbvprintf+0x544>
 8000a06:	2825      	cmp	r0, #37	; 0x25
 8000a08:	f43f ad8f 	beq.w	800052a <cbvprintf+0x22>
 8000a0c:	2858      	cmp	r0, #88	; 0x58
 8000a0e:	d1a7      	bne.n	8000960 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000a10:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000a1a:	ab04      	add	r3, sp, #16
 8000a1c:	aa0c      	add	r2, sp, #48	; 0x30
 8000a1e:	f001 ff4b 	bl	80028b8 <encode_uint>
 8000a22:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000a24:	f1b8 0f00 	cmp.w	r8, #0
 8000a28:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000a2c:	db0c      	blt.n	8000a48 <cbvprintf+0x540>
				conv->flag_zero = false;
 8000a2e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000a32:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000a36:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000a3a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000a3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000a40:	d902      	bls.n	8000a48 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
 8000a42:	eba8 0303 	sub.w	r3, r8, r3
 8000a46:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000a48:	4680      	mov	r8, r0
 8000a4a:	e03d      	b.n	8000ac8 <cbvprintf+0x5c0>
		switch (conv->specifier) {
 8000a4c:	3863      	subs	r0, #99	; 0x63
 8000a4e:	2815      	cmp	r0, #21
 8000a50:	d886      	bhi.n	8000960 <cbvprintf+0x458>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <cbvprintf+0x550>)
 8000a54:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000a58:	08000ad9 	.word	0x08000ad9
 8000a5c:	08000b3d 	.word	0x08000b3d
 8000a60:	08000961 	.word	0x08000961
 8000a64:	08000961 	.word	0x08000961
 8000a68:	08000961 	.word	0x08000961
 8000a6c:	08000961 	.word	0x08000961
 8000a70:	08000b3d 	.word	0x08000b3d
 8000a74:	08000961 	.word	0x08000961
 8000a78:	08000961 	.word	0x08000961
 8000a7c:	08000961 	.word	0x08000961
 8000a80:	08000961 	.word	0x08000961
 8000a84:	08000b97 	.word	0x08000b97
 8000a88:	08000b65 	.word	0x08000b65
 8000a8c:	08000b69 	.word	0x08000b69
 8000a90:	08000961 	.word	0x08000961
 8000a94:	08000961 	.word	0x08000961
 8000a98:	08000ab1 	.word	0x08000ab1
 8000a9c:	08000961 	.word	0x08000961
 8000aa0:	08000b65 	.word	0x08000b65
 8000aa4:	08000961 	.word	0x08000961
 8000aa8:	08000961 	.word	0x08000961
 8000aac:	08000b65 	.word	0x08000b65
			if (precision >= 0) {
 8000ab0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000ab4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000ab8:	db0a      	blt.n	8000ad0 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
 8000aba:	4641      	mov	r1, r8
 8000abc:	4650      	mov	r0, sl
 8000abe:	f001 ff72 	bl	80029a6 <strnlen>
			bpe = bps + len;
 8000ac2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000ac6:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000ac8:	f1ba 0f00 	cmp.w	sl, #0
 8000acc:	d10c      	bne.n	8000ae8 <cbvprintf+0x5e0>
 8000ace:	e747      	b.n	8000960 <cbvprintf+0x458>
				len = strlen(bps);
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	f001 ff61 	bl	8002998 <strlen>
 8000ad6:	e7f4      	b.n	8000ac2 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ada:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000ade:	2600      	movs	r6, #0
			bps = buf;
 8000ae0:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000ae4:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 8000ae8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000aec:	b106      	cbz	r6, 8000af0 <cbvprintf+0x5e8>
			nj_len += 1U;
 8000aee:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000af0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000af4:	06d0      	lsls	r0, r2, #27
 8000af6:	d568      	bpl.n	8000bca <cbvprintf+0x6c2>
			nj_len += 2U;
 8000af8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000afa:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000afc:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000afe:	bf48      	it	mi
 8000b00:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000b02:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000b04:	bf48      	it	mi
 8000b06:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000b08:	f1b9 0f00 	cmp.w	r9, #0
 8000b0c:	dd76      	ble.n	8000bfc <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
 8000b0e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000b12:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000b16:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000b1a:	9303      	str	r3, [sp, #12]
 8000b1c:	0753      	lsls	r3, r2, #29
 8000b1e:	d46d      	bmi.n	8000bfc <cbvprintf+0x6f4>
				if (conv->flag_zero) {
 8000b20:	0650      	lsls	r0, r2, #25
 8000b22:	d561      	bpl.n	8000be8 <cbvprintf+0x6e0>
					if (sign != 0) {
 8000b24:	b146      	cbz	r6, 8000b38 <cbvprintf+0x630>
						OUTC(sign);
 8000b26:	9b02      	ldr	r3, [sp, #8]
 8000b28:	4659      	mov	r1, fp
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	4798      	blx	r3
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	db57      	blt.n	8000be2 <cbvprintf+0x6da>
						sign = 0;
 8000b32:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000b34:	3501      	adds	r5, #1
						sign = 0;
 8000b36:	461e      	mov	r6, r3
					pad = '0';
 8000b38:	2330      	movs	r3, #48	; 0x30
 8000b3a:	e056      	b.n	8000bea <cbvprintf+0x6e2>
			if (conv->flag_plus) {
 8000b3c:	071e      	lsls	r6, r3, #28
 8000b3e:	d40f      	bmi.n	8000b60 <cbvprintf+0x658>
				sign = ' ';
 8000b40:	f013 0610 	ands.w	r6, r3, #16
 8000b44:	bf18      	it	ne
 8000b46:	2620      	movne	r6, #32
			sint = value->sint;
 8000b48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f6bf af5f 	bge.w	8000a10 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
 8000b52:	4252      	negs	r2, r2
 8000b54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000b5c:	262d      	movs	r6, #45	; 0x2d
 8000b5e:	e757      	b.n	8000a10 <cbvprintf+0x508>
				sign = '+';
 8000b60:	262b      	movs	r6, #43	; 0x2b
 8000b62:	e7f1      	b.n	8000b48 <cbvprintf+0x640>
		switch (conv->specifier) {
 8000b64:	2600      	movs	r6, #0
 8000b66:	e753      	b.n	8000a10 <cbvprintf+0x508>
			if (value->ptr != NULL) {
 8000b68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000b6a:	b340      	cbz	r0, 8000bbe <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b6c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	aa0c      	add	r2, sp, #48	; 0x30
 8000b74:	ab04      	add	r3, sp, #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	f001 fe9e 	bl	80028b8 <encode_uint>
				conv->altform_0c = true;
 8000b7c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000b80:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000b84:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000b88:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b8c:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000b8e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000b92:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000b94:	e746      	b.n	8000a24 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
 8000b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000b98:	2907      	cmp	r1, #7
 8000b9a:	f63f aee1 	bhi.w	8000960 <cbvprintf+0x458>
 8000b9e:	e8df f001 	tbb	[pc, r1]
 8000ba2:	040c      	.short	0x040c
 8000ba4:	08080c06 	.word	0x08080c06
 8000ba8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000baa:	701d      	strb	r5, [r3, #0]
		break;
 8000bac:	e6d8      	b.n	8000960 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 8000bae:	801d      	strh	r5, [r3, #0]
		break;
 8000bb0:	e6d6      	b.n	8000960 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000bb2:	17ea      	asrs	r2, r5, #31
 8000bb4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000bb8:	e6d2      	b.n	8000960 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000bba:	601d      	str	r5, [r3, #0]
		break;
 8000bbc:	e6d0      	b.n	8000960 <cbvprintf+0x458>
			bps = "(nil)";
 8000bbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c88 <cbvprintf+0x780>
 8000bc2:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000bc4:	f10a 0805 	add.w	r8, sl, #5
 8000bc8:	e78e      	b.n	8000ae8 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
 8000bca:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000bcc:	bf48      	it	mi
 8000bce:	3301      	addmi	r3, #1
 8000bd0:	e793      	b.n	8000afa <cbvprintf+0x5f2>
					OUTC(pad);
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	4659      	mov	r1, fp
 8000bd8:	9b02      	ldr	r3, [sp, #8]
 8000bda:	4798      	blx	r3
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	9b03      	ldr	r3, [sp, #12]
 8000be0:	da04      	bge.n	8000bec <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
 8000be2:	b011      	add	sp, #68	; 0x44
 8000be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000be8:	2320      	movs	r3, #32
 8000bea:	444d      	add	r5, r9
 8000bec:	464a      	mov	r2, r9
				while (width-- > 0) {
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	eba5 0109 	sub.w	r1, r5, r9
 8000bf4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000bf8:	dceb      	bgt.n	8000bd2 <cbvprintf+0x6ca>
 8000bfa:	460d      	mov	r5, r1
		if (sign != 0) {
 8000bfc:	b136      	cbz	r6, 8000c0c <cbvprintf+0x704>
			OUTC(sign);
 8000bfe:	9b02      	ldr	r3, [sp, #8]
 8000c00:	4659      	mov	r1, fp
 8000c02:	4630      	mov	r0, r6
 8000c04:	4798      	blx	r3
 8000c06:	2800      	cmp	r0, #0
 8000c08:	dbeb      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c0a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000c0c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000c10:	06d9      	lsls	r1, r3, #27
 8000c12:	d401      	bmi.n	8000c18 <cbvprintf+0x710>
 8000c14:	071a      	lsls	r2, r3, #28
 8000c16:	d506      	bpl.n	8000c26 <cbvprintf+0x71e>
				OUTC('0');
 8000c18:	9b02      	ldr	r3, [sp, #8]
 8000c1a:	4659      	mov	r1, fp
 8000c1c:	2030      	movs	r0, #48	; 0x30
 8000c1e:	4798      	blx	r3
 8000c20:	2800      	cmp	r0, #0
 8000c22:	dbde      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c24:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000c26:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000c2a:	06db      	lsls	r3, r3, #27
 8000c2c:	d507      	bpl.n	8000c3e <cbvprintf+0x736>
				OUTC(conv->specifier);
 8000c2e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000c32:	9b02      	ldr	r3, [sp, #8]
 8000c34:	4659      	mov	r1, fp
 8000c36:	4798      	blx	r3
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	dbd2      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c3c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c3e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000c40:	442e      	add	r6, r5
 8000c42:	1b73      	subs	r3, r6, r5
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dc16      	bgt.n	8000c76 <cbvprintf+0x76e>
			OUTS(bps, bpe);
 8000c48:	9802      	ldr	r0, [sp, #8]
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	4652      	mov	r2, sl
 8000c4e:	4659      	mov	r1, fp
 8000c50:	f001 fe78 	bl	8002944 <outs>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	dbc4      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c58:	4405      	add	r5, r0
		while (width > 0) {
 8000c5a:	44a9      	add	r9, r5
 8000c5c:	eba9 0305 	sub.w	r3, r9, r5
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f77f ae7d 	ble.w	8000960 <cbvprintf+0x458>
			OUTC(' ');
 8000c66:	9b02      	ldr	r3, [sp, #8]
 8000c68:	4659      	mov	r1, fp
 8000c6a:	2020      	movs	r0, #32
 8000c6c:	4798      	blx	r3
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	dbb7      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c72:	3501      	adds	r5, #1
			--width;
 8000c74:	e7f2      	b.n	8000c5c <cbvprintf+0x754>
				OUTC('0');
 8000c76:	9b02      	ldr	r3, [sp, #8]
 8000c78:	4659      	mov	r1, fp
 8000c7a:	2030      	movs	r0, #48	; 0x30
 8000c7c:	4798      	blx	r3
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dbaf      	blt.n	8000be2 <cbvprintf+0x6da>
 8000c82:	3501      	adds	r5, #1
 8000c84:	e7dd      	b.n	8000c42 <cbvprintf+0x73a>
 8000c86:	bf00      	nop
 8000c88:	08003740 	.word	0x08003740

08000c8c <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <st_stm32f4_init+0x34>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c94:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c9c:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000c9e:	f04f 0210 	mov.w	r2, #16
 8000ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8000ca6:	f382 8812 	msr	BASEPRI_MAX, r2
 8000caa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000cae:	f383 8811 	msr	BASEPRI, r3
 8000cb2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <st_stm32f4_init+0x38>)
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <st_stm32f4_init+0x3c>)
 8000cba:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	4770      	bx	lr
 8000cc0:	40023c00 	.word	0x40023c00
 8000cc4:	20000030 	.word	0x20000030
 8000cc8:	00f42400 	.word	0x00f42400

08000ccc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000ccc:	4901      	ldr	r1, [pc, #4]	; (8000cd4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000cce:	2210      	movs	r2, #16
	str	r2, [r1]
 8000cd0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000cd2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000cd4:	e000ed10 	.word	0xe000ed10

08000cd8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000cd8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000cda:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000cdc:	f380 8811 	msr	BASEPRI, r0
	isb
 8000ce0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000ce4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000ce8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000cea:	b662      	cpsie	i
	isb
 8000cec:	f3bf 8f6f 	isb	sy

	bx	lr
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000cf4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db08      	blt.n	8000d0c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f000 001f 	and.w	r0, r0, #31
 8000d00:	fa02 f000 	lsl.w	r0, r2, r0
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	4a02      	ldr	r2, [pc, #8]	; (8000d10 <arch_irq_enable+0x1c>)
 8000d08:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000d14:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d16:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	bfa8      	it	ge
 8000d1a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000d1e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	bfb8      	it	lt
 8000d24:	4b06      	ldrlt	r3, [pc, #24]	; (8000d40 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000d2a:	bfac      	ite	ge
 8000d2c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	bfb4      	ite	lt
 8000d38:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed14 	.word	0xe000ed14

08000d44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000d44:	bf30      	wfi
    b z_SysNmiOnReset
 8000d46:	f7ff bffd 	b.w	8000d44 <z_SysNmiOnReset>
 8000d4a:	bf00      	nop

08000d4c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8000d4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <z_arm_prep_c+0x44>)
 8000d52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d56:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000d6c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000d70:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d74:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000d78:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000d7c:	f001 f86e 	bl	8001e5c <z_bss_zero>
	z_data_copy();
 8000d80:	f001 fc20 	bl	80025c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000d84:	f000 f9be 	bl	8001104 <z_arm_interrupt_init>
	z_cstart();
 8000d88:	f001 f872 	bl	8001e70 <z_cstart>
 8000d8c:	08000000 	.word	0x08000000
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d96:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000d98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d9a:	6809      	ldr	r1, [r1, #0]
 8000d9c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d9e:	4909      	ldr	r1, [pc, #36]	; (8000dc4 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000da0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000da2:	684b      	ldr	r3, [r1, #4]
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	604b      	str	r3, [r1, #4]
 8000daa:	2300      	movs	r3, #0
 8000dac:	f383 8811 	msr	BASEPRI, r3
 8000db0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000db4:	6893      	ldr	r3, [r2, #8]
}
 8000db6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200002d0 	.word	0x200002d0
 8000dc0:	08003730 	.word	0x08003730
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000dc8:	4912      	ldr	r1, [pc, #72]	; (8000e14 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000dca:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000dcc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000dd0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000dd2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000dd6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000dda:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000ddc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000de0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000de4:	4f0c      	ldr	r7, [pc, #48]	; (8000e18 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000de6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000dea:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000dec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000dee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000df0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000df2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000df4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000df6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000dfa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000dfc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000dfe:	f000 f9c1 	bl	8001184 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000e02:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000e06:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000e0a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000e0e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000e12:	4770      	bx	lr
    ldr r1, =_kernel
 8000e14:	200002d0 	.word	0x200002d0
    ldr v4, =_SCS_ICSR
 8000e18:	e000ed04 	.word	0xe000ed04

08000e1c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000e1c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000e20:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000e22:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000e26:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000e2a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000e2c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000e30:	2902      	cmp	r1, #2
    beq _oops
 8000e32:	d0ff      	beq.n	8000e34 <_oops>

08000e34 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000e34:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000e36:	f001 fda0 	bl	800297a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8000e3a:	bd01      	pop	{r0, pc}

08000e3c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000e3c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000e46:	490a      	ldr	r1, [pc, #40]	; (8000e70 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e4e:	9b02      	ldr	r3, [sp, #8]
 8000e50:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000e54:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000e60:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000e64:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000e66:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000e68:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000e6a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	080028a5 	.word	0x080028a5

08000e74 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <z_check_thread_stack_fail+0x28>)
{
 8000e76:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000e78:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000e7a:	b170      	cbz	r0, 8000e9a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000e7c:	f113 0f16 	cmn.w	r3, #22
 8000e80:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000e82:	d005      	beq.n	8000e90 <z_check_thread_stack_fail+0x1c>
 8000e84:	f1a0 0220 	sub.w	r2, r0, #32
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d805      	bhi.n	8000e98 <z_check_thread_stack_fail+0x24>
 8000e8c:	4283      	cmp	r3, r0
 8000e8e:	d203      	bcs.n	8000e98 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8000e90:	4281      	cmp	r1, r0
 8000e92:	bf28      	it	cs
 8000e94:	2000      	movcs	r0, #0
 8000e96:	4770      	bx	lr
 8000e98:	2000      	movs	r0, #0
}
 8000e9a:	4770      	bx	lr
 8000e9c:	200002d0 	.word	0x200002d0

08000ea0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000ea0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <arch_switch_to_main_thread+0x28>)
 8000ea4:	6098      	str	r0, [r3, #8]
{
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000eaa:	f000 f96b 	bl	8001184 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f385 8809 	msr	PSP, r5
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	b663      	cpsie	if
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f001 fcee 	bl	80028a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000ec8:	200002d0 	.word	0x200002d0

08000ecc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000ecc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000ece:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000ed2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000ed6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000eda:	4904      	ldr	r1, [pc, #16]	; (8000eec <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000edc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000ede:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000ee0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000ee2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000ee6:	4902      	ldr	r1, [pc, #8]	; (8000ef0 <_isr_wrapper+0x24>)
	bx r1
 8000ee8:	4708      	bx	r1
 8000eea:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000eec:	08003254 	.word	0x08003254
	ldr r1, =z_arm_int_exit
 8000ef0:	08000ef5 	.word	0x08000ef5

08000ef4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000ef6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000ef8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8000efa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000efc:	d003      	beq.n	8000f06 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000efe:	4903      	ldr	r1, [pc, #12]	; (8000f0c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000f04:	600a      	str	r2, [r1, #0]

08000f06 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000f06:	4770      	bx	lr
	ldr r3, =_kernel
 8000f08:	200002d0 	.word	0x200002d0
	ldr r1, =_SCS_ICSR
 8000f0c:	e000ed04 	.word	0xe000ed04

08000f10 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <mem_manage_fault+0x68>)
{
 8000f14:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8000f1c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f1e:	0790      	lsls	r0, r2, #30
 8000f20:	d519      	bpl.n	8000f56 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8000f22:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f26:	0612      	lsls	r2, r2, #24
 8000f28:	d515      	bpl.n	8000f56 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8000f2a:	b119      	cbz	r1, 8000f34 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3a:	06d1      	lsls	r1, r2, #27
 8000f3c:	d40e      	bmi.n	8000f5c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8000f40:	079a      	lsls	r2, r3, #30
 8000f42:	d40b      	bmi.n	8000f5c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8000f44:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <mem_manage_fault+0x68>)
 8000f48:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000f4a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000f4e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8000f50:	2300      	movs	r3, #0
 8000f52:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8000f54:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8000f56:	f06f 0015 	mvn.w	r0, #21
 8000f5a:	e7eb      	b.n	8000f34 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <mem_manage_fault+0x68>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	051b      	lsls	r3, r3, #20
 8000f62:	d5ef      	bpl.n	8000f44 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff ff85 	bl	8000e74 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d0ea      	beq.n	8000f44 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f6e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8000f72:	2002      	movs	r0, #2
 8000f74:	e7e7      	b.n	8000f46 <mem_manage_fault+0x36>
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <bus_fault.constprop.0+0x38>)
 8000f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f84:	0592      	lsls	r2, r2, #22
 8000f86:	d508      	bpl.n	8000f9a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f8c:	0412      	lsls	r2, r2, #16
 8000f8e:	d504      	bpl.n	8000f9a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8000f90:	b118      	cbz	r0, 8000f9a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <bus_fault.constprop.0+0x38>)
 8000f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8000fa2:	bf58      	it	pl
 8000fa4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8000fa8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8000faa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8000fb0:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8000fb8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <z_arm_fault+0x124>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
{
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8000fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	f386 8811 	msr	BASEPRI, r6
 8000fcc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8000fd0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8000fd4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8000fd8:	d111      	bne.n	8000ffe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8000fda:	f002 010c 	and.w	r1, r2, #12
 8000fde:	2908      	cmp	r1, #8
 8000fe0:	d00d      	beq.n	8000ffe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8000fe2:	0711      	lsls	r1, r2, #28
 8000fe4:	d401      	bmi.n	8000fea <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8000fe6:	4605      	mov	r5, r0
			*nested_exc = true;
 8000fe8:	2601      	movs	r6, #1
	*recoverable = false;
 8000fea:	2200      	movs	r2, #0
	switch (fault) {
 8000fec:	3b03      	subs	r3, #3
	*recoverable = false;
 8000fee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d86b      	bhi.n	80010ce <z_arm_fault+0x116>
 8000ff6:	e8df f003 	tbb	[pc, r3]
 8000ffa:	5504      	.short	0x5504
 8000ffc:	5d59      	.short	0x5d59
		return NULL;
 8000ffe:	4635      	mov	r5, r6
 8001000:	e7f3      	b.n	8000fea <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <z_arm_fault+0x124>)
 8001004:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001006:	f014 0402 	ands.w	r4, r4, #2
 800100a:	d160      	bne.n	80010ce <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100e:	2a00      	cmp	r2, #0
 8001010:	db15      	blt.n	800103e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001014:	0052      	lsls	r2, r2, #1
 8001016:	d512      	bpl.n	800103e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8001018:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800101a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 800101e:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001022:	4291      	cmp	r1, r2
 8001024:	d00a      	beq.n	800103c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 8001026:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800102a:	b30a      	cbz	r2, 8001070 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
 800102c:	f10d 0207 	add.w	r2, sp, #7
 8001030:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001032:	4628      	mov	r0, r5
 8001034:	f7ff ff6c 	bl	8000f10 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8001038:	4604      	mov	r4, r0
		break;
 800103a:	e000      	b.n	800103e <z_arm_fault+0x86>
			reason = esf->basic.r0;
 800103c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800103e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001042:	b99b      	cbnz	r3, 800106c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001044:	2220      	movs	r2, #32
 8001046:	4629      	mov	r1, r5
 8001048:	a802      	add	r0, sp, #8
 800104a:	f001 fcc1 	bl	80029d0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800104e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001050:	2e00      	cmp	r6, #0
 8001052:	d03e      	beq.n	80010d2 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001054:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001058:	b922      	cbnz	r2, 8001064 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800105a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800105e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001062:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001064:	a902      	add	r1, sp, #8
 8001066:	4620      	mov	r0, r4
 8001068:	f001 fc85 	bl	8002976 <z_arm_fatal_error>
}
 800106c:	b00a      	add	sp, #40	; 0x28
 800106e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 8001070:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001074:	b12a      	cbz	r2, 8001082 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
 8001076:	f10d 0107 	add.w	r1, sp, #7
 800107a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 800107c:	f7ff ff7e 	bl	8000f7c <bus_fault.constprop.0>
 8001080:	e7da      	b.n	8001038 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 8001082:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001084:	b292      	uxth	r2, r2
 8001086:	2a00      	cmp	r2, #0
 8001088:	d0d9      	beq.n	800103e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800108a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800108c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001098:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800109c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
 80010a2:	e7cc      	b.n	800103e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 80010a4:	f10d 0207 	add.w	r2, sp, #7
 80010a8:	2100      	movs	r1, #0
 80010aa:	e7c2      	b.n	8001032 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 80010ac:	f10d 0107 	add.w	r1, sp, #7
 80010b0:	2000      	movs	r0, #0
 80010b2:	e7e3      	b.n	800107c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <z_arm_fault+0x124>)
 80010b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80010ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80010bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80010be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80010c8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80010ce:	2400      	movs	r4, #0
 80010d0:	e7b5      	b.n	800103e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	e7c2      	b.n	8001062 <z_arm_fault+0xaa>
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80010e0:	4a02      	ldr	r2, [pc, #8]	; (80010ec <z_arm_fault_init+0xc>)
 80010e2:	6953      	ldr	r3, [r2, #20]
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80010f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80010f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80010f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80010fa:	4672      	mov	r2, lr
	bl z_arm_fault
 80010fc:	f7ff ff5c 	bl	8000fb8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001100:	bd01      	pop	{r0, pc}
 8001102:	bf00      	nop

08001104 <z_arm_interrupt_init>:
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	2110      	movs	r1, #16
 800110a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800110c:	3301      	adds	r3, #1
 800110e:	2b55      	cmp	r3, #85	; 0x55
 8001110:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001114:	d1f9      	bne.n	800110a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800111c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800111e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001124:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001128:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800112a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800112e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001132:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001134:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001136:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800113a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800113e:	f7ff fe05 	bl	8000d4c <z_arm_prep_c>
 8001142:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001144:	200008a0 	.word	0x200008a0

08001148 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <z_impl_k_thread_abort+0x1c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4283      	cmp	r3, r0
 800114e:	d107      	bne.n	8001160 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001150:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001154:	b123      	cbz	r3, 8001160 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <z_impl_k_thread_abort+0x20>)
 8001158:	6853      	ldr	r3, [r2, #4]
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8001160:	f001 b9de 	b.w	8002520 <z_thread_abort>
 8001164:	200002d0 	.word	0x200002d0
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <z_arm_configure_static_mpu_regions+0xc>)
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <z_arm_configure_static_mpu_regions+0x10>)
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <z_arm_configure_static_mpu_regions+0x14>)
 8001172:	2101      	movs	r1, #1
 8001174:	f000 b86e 	b.w	8001254 <arm_core_mpu_configure_static_mpu_regions>
 8001178:	20018000 	.word	0x20018000
 800117c:	20000000 	.word	0x20000000
 8001180:	08003574 	.word	0x08003574

08001184 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001184:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001188:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 800118a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800118e:	2120      	movs	r1, #32
 8001190:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001194:	4618      	mov	r0, r3
 8001196:	2101      	movs	r1, #1
 8001198:	f000 b866 	b.w	8001268 <arm_core_mpu_configure_dynamic_mpu_regions>
 800119c:	20000178 	.word	0x20000178
 80011a0:	150b0000 	.word	0x150b0000

080011a4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80011a6:	4f1f      	ldr	r7, [pc, #124]	; (8001224 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80011a8:	2600      	movs	r6, #0
 80011aa:	428e      	cmp	r6, r1
 80011ac:	db01      	blt.n	80011b2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80011ae:	4610      	mov	r0, r2
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80011b2:	6844      	ldr	r4, [r0, #4]
 80011b4:	b39c      	cbz	r4, 800121e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 80011b6:	b153      	cbz	r3, 80011ce <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80011b8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80011bc:	ea14 0f0c 	tst.w	r4, ip
 80011c0:	d118      	bne.n	80011f4 <mpu_configure_regions+0x50>
		&&
 80011c2:	2c1f      	cmp	r4, #31
 80011c4:	d916      	bls.n	80011f4 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 80011c6:	6805      	ldr	r5, [r0, #0]
		&&
 80011c8:	ea1c 0f05 	tst.w	ip, r5
 80011cc:	d112      	bne.n	80011f4 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80011ce:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80011d0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80011d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80011d6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80011d8:	d90f      	bls.n	80011fa <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 80011da:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80011de:	d80e      	bhi.n	80011fe <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80011e0:	3c01      	subs	r4, #1
 80011e2:	fab4 f484 	clz	r4, r4
 80011e6:	f1c4 041f 	rsb	r4, r4, #31
 80011ea:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80011ec:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80011ee:	ea4c 0404 	orr.w	r4, ip, r4
 80011f2:	d906      	bls.n	8001202 <mpu_configure_regions+0x5e>
			return -EINVAL;
 80011f4:	f06f 0215 	mvn.w	r2, #21
 80011f8:	e7d9      	b.n	80011ae <mpu_configure_regions+0xa>
		return REGION_32B;
 80011fa:	2408      	movs	r4, #8
 80011fc:	e7f6      	b.n	80011ec <mpu_configure_regions+0x48>
		return REGION_4G;
 80011fe:	243e      	movs	r4, #62	; 0x3e
 8001200:	e7f4      	b.n	80011ec <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001202:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001206:	4315      	orrs	r5, r2
 8001208:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800120c:	f044 0401 	orr.w	r4, r4, #1
 8001210:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001214:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8001218:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800121a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800121e:	3601      	adds	r6, #1
 8001220:	300c      	adds	r0, #12
 8001222:	e7c2      	b.n	80011aa <mpu_configure_regions+0x6>
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <arm_core_mpu_enable+0x14>)
 800122a:	2205      	movs	r2, #5
 800122c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001234:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001240:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <arm_core_mpu_disable+0x10>)
 8001246:	2200      	movs	r2, #0
 8001248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001254:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001256:	4c03      	ldr	r4, [pc, #12]	; (8001264 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001258:	2301      	movs	r3, #1
 800125a:	7822      	ldrb	r2, [r4, #0]
 800125c:	f7ff ffa2 	bl	80011a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001260:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001262:	bd10      	pop	{r4, pc}
 8001264:	20000304 	.word	0x20000304

08001268 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001268:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800126c:	2300      	movs	r3, #0
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	f7ff ff98 	bl	80011a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001274:	f110 0f16 	cmn.w	r0, #22
 8001278:	d002      	beq.n	8001280 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800127c:	2807      	cmp	r0, #7
 800127e:	dd00      	ble.n	8001282 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001280:	bd08      	pop	{r3, pc}
 8001282:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001286:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800128a:	3001      	adds	r0, #1
 800128c:	e7f6      	b.n	800127c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800128e:	bf00      	nop
 8001290:	20000304 	.word	0x20000304
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001298:	4914      	ldr	r1, [pc, #80]	; (80012ec <z_arm_mpu_init+0x54>)
 800129a:	6808      	ldr	r0, [r1, #0]
 800129c:	2808      	cmp	r0, #8
{
 800129e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80012a0:	d821      	bhi.n	80012e6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80012a2:	f7ff ffcd 	bl	8001240 <arm_core_mpu_disable>
 80012a6:	4c12      	ldr	r4, [pc, #72]	; (80012f0 <z_arm_mpu_init+0x58>)
 80012a8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012aa:	2200      	movs	r2, #0
 80012ac:	4290      	cmp	r0, r2
 80012ae:	f101 010c 	add.w	r1, r1, #12
 80012b2:	d105      	bne.n	80012c0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <z_arm_mpu_init+0x5c>)
 80012b6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80012b8:	f7ff ffb6 	bl	8001228 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80012bc:	2000      	movs	r0, #0
}
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012c4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80012c8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80012cc:	4313      	orrs	r3, r2
 80012ce:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012d2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80012d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012e2:	3201      	adds	r2, #1
 80012e4:	e7e2      	b.n	80012ac <z_arm_mpu_init+0x14>
		return -1;
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ea:	e7e8      	b.n	80012be <z_arm_mpu_init+0x26>
 80012ec:	08003580 	.word	0x08003580
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	20000304 	.word	0x20000304

080012f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <__stdout_hook_install+0x8>)
 80012fa:	6018      	str	r0, [r3, #0]
}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000004 	.word	0x20000004

08001304 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001308:	4f0d      	ldr	r7, [pc, #52]	; (8001340 <__stm32_exti_isr.isra.0+0x3c>)
 800130a:	4604      	mov	r4, r0
 800130c:	460e      	mov	r6, r1
 800130e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001310:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001314:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001318:	42b4      	cmp	r4, r6
 800131a:	db01      	blt.n	8001320 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800131c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001320:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001322:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001326:	ea33 0202 	bics.w	r2, r3, r2
 800132a:	d107      	bne.n	800133c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800132c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800132e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8001332:	b11b      	cbz	r3, 800133c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001334:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001338:	4620      	mov	r0, r4
 800133a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800133c:	3401      	adds	r4, #1
 800133e:	e7eb      	b.n	8001318 <__stm32_exti_isr.isra.0+0x14>
 8001340:	40013c00 	.word	0x40013c00

08001344 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001346:	2301      	movs	r3, #1
 8001348:	6811      	ldr	r1, [r2, #0]
 800134a:	4083      	lsls	r3, r0
 800134c:	430b      	orrs	r3, r1
 800134e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <stm32_exti_enable+0x18>)
 8001352:	5618      	ldrsb	r0, [r3, r0]
 8001354:	f7ff bcce 	b.w	8000cf4 <arch_irq_enable>
 8001358:	40013c00 	.word	0x40013c00
 800135c:	08003773 	.word	0x08003773

08001360 <stm32_exti_disable>:
	if (line < 32) {
 8001360:	281f      	cmp	r0, #31
 8001362:	dc07      	bgt.n	8001374 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001366:	2201      	movs	r2, #1
 8001368:	680b      	ldr	r3, [r1, #0]
 800136a:	fa02 f000 	lsl.w	r0, r2, r0
 800136e:	ea23 0000 	bic.w	r0, r3, r0
 8001372:	6008      	str	r0, [r1, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40013c00 	.word	0x40013c00

0800137c <stm32_exti_trigger>:
	switch (trigger) {
 800137c:	2903      	cmp	r1, #3
 800137e:	d80f      	bhi.n	80013a0 <stm32_exti_trigger+0x24>
 8001380:	e8df f001 	tbb	[pc, r1]
 8001384:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800138a:	2201      	movs	r2, #1
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	fa02 f000 	lsl.w	r0, r2, r0
 8001392:	ea21 0100 	bic.w	r1, r1, r0
 8001396:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 800139e:	60d8      	str	r0, [r3, #12]
}
 80013a0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013a2:	2301      	movs	r3, #1
 80013a4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <stm32_exti_trigger+0x64>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	4302      	orrs	r2, r0
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e7f2      	b.n	8001398 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80013b2:	2301      	movs	r3, #1
 80013b4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <stm32_exti_trigger+0x64>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4302      	orrs	r2, r0
 80013be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	ea22 0000 	bic.w	r0, r2, r0
 80013c6:	6098      	str	r0, [r3, #8]
}
 80013c8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80013ca:	2301      	movs	r3, #1
 80013cc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <stm32_exti_trigger+0x64>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4302      	orrs	r2, r0
 80013d6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	4310      	orrs	r0, r2
 80013dc:	e7df      	b.n	800139e <stm32_exti_trigger+0x22>
 80013de:	bf00      	nop
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <stm32_exti_set_callback+0x20>)
{
 80013e6:	b510      	push	{r4, lr}
 80013e8:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80013ea:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80013ee:	b928      	cbnz	r0, 80013fc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80013f0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80013f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80013f8:	605a      	str	r2, [r3, #4]

	return 0;
}
 80013fa:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80013fc:	f06f 000f 	mvn.w	r0, #15
 8001400:	e7fb      	b.n	80013fa <stm32_exti_set_callback+0x16>
 8001402:	bf00      	nop
 8001404:	20000184 	.word	0x20000184

08001408 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <stm32_exti_unset_callback+0x10>)
 800140a:	2200      	movs	r2, #0
 800140c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001410:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001414:	605a      	str	r2, [r3, #4]
}
 8001416:	4770      	bx	lr
 8001418:	20000184 	.word	0x20000184

0800141c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800141c:	680b      	ldr	r3, [r1, #0]
{
 800141e:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8001420:	2b03      	cmp	r3, #3
 8001422:	d82d      	bhi.n	8001480 <stm32_clock_control_on+0x64>
 8001424:	e8df f003 	tbb	[pc, r3]
 8001428:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800142c:	4a16      	ldr	r2, [pc, #88]	; (8001488 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800142e:	684b      	ldr	r3, [r1, #4]
 8001430:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001432:	4319      	orrs	r1, r3
 8001434:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001436:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001438:	4013      	ands	r3, r2
 800143a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800143c:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800143e:	2000      	movs	r0, #0
}
 8001440:	b004      	add	sp, #16
 8001442:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8001446:	684b      	ldr	r3, [r1, #4]
 8001448:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800144a:	4319      	orrs	r1, r3
 800144c:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800144e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001450:	4013      	ands	r3, r2
 8001452:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	e7f2      	b.n	800143e <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800145a:	684b      	ldr	r3, [r1, #4]
 800145c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800145e:	4319      	orrs	r1, r3
 8001460:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001462:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001464:	4013      	ands	r3, r2
 8001466:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001468:	9b02      	ldr	r3, [sp, #8]
 800146a:	e7e8      	b.n	800143e <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800146e:	684b      	ldr	r3, [r1, #4]
 8001470:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001472:	4319      	orrs	r1, r3
 8001474:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001476:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001478:	4013      	ands	r3, r2
 800147a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800147c:	9b03      	ldr	r3, [sp, #12]
 800147e:	e7de      	b.n	800143e <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 8001480:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001484:	e7dc      	b.n	8001440 <stm32_clock_control_on+0x24>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800148c:	680b      	ldr	r3, [r1, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d820      	bhi.n	80014d4 <stm32_clock_control_off+0x48>
 8001492:	e8df f003 	tbb	[pc, r3]
 8001496:	0a02      	.short	0x0a02
 8001498:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <stm32_clock_control_off+0x50>)
 800149c:	6849      	ldr	r1, [r1, #4]
 800149e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014a0:	ea23 0301 	bic.w	r3, r3, r1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80014a6:	2000      	movs	r0, #0
}
 80014a8:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <stm32_clock_control_off+0x50>)
 80014ac:	6849      	ldr	r1, [r1, #4]
 80014ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014b0:	ea23 0301 	bic.w	r3, r3, r1
 80014b4:	6353      	str	r3, [r2, #52]	; 0x34
 80014b6:	e7f6      	b.n	80014a6 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <stm32_clock_control_off+0x50>)
 80014ba:	6849      	ldr	r1, [r1, #4]
 80014bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014be:	ea23 0301 	bic.w	r3, r3, r1
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	e7ef      	b.n	80014a6 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <stm32_clock_control_off+0x50>)
 80014c8:	6849      	ldr	r1, [r1, #4]
 80014ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80014cc:	ea23 0301 	bic.w	r3, r3, r1
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	e7e8      	b.n	80014a6 <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 80014d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <stm32_clock_control_get_subsys_rate+0x24>)
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80014e2:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = SystemCoreClock;
 80014e4:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80014e6:	2906      	cmp	r1, #6
 80014e8:	d809      	bhi.n	80014fe <stm32_clock_control_get_subsys_rate+0x1e>
 80014ea:	e8df f001 	tbb	[pc, r1]
 80014ee:	0505      	.short	0x0505
 80014f0:	08080504 	.word	0x08080504
 80014f4:	05          	.byte	0x05
 80014f5:	00          	.byte	0x00
	return clock / prescaler;
 80014f6:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80014f8:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80014fa:	2000      	movs	r0, #0
		break;
 80014fc:	4770      	bx	lr
	switch (pclken->bus) {
 80014fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001502:	4770      	bx	lr
 8001504:	20000030 	.word	0x20000030

08001508 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800150c:	2300      	movs	r3, #0
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8001516:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001518:	f000 f838 	bl	800158c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800151c:	a803      	add	r0, sp, #12
 800151e:	f001 fadf 	bl	8002ae0 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <stm32_clock_control_init+0x7c>)
 8001524:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8001526:	0791      	lsls	r1, r2, #30
 8001528:	d406      	bmi.n	8001538 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001532:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8001534:	0792      	lsls	r2, r2, #30
 8001536:	d5fc      	bpl.n	8001532 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001538:	4c12      	ldr	r4, [pc, #72]	; (8001584 <stm32_clock_control_init+0x7c>)
 800153a:	68a3      	ldr	r3, [r4, #8]
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001542:	68a3      	ldr	r3, [r4, #8]
 8001544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001548:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800154a:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800154c:	f015 050c 	ands.w	r5, r5, #12
 8001550:	d1fb      	bne.n	800154a <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001552:	6823      	ldr	r3, [r4, #0]
		LL_RCC_HSE_EnableDiv2();
	}
#endif

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <stm32_clock_control_init+0x80>)
 8001556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800155a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001562:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001566:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8001568:	aa03      	add	r2, sp, #12
 800156a:	466b      	mov	r3, sp
 800156c:	2101      	movs	r1, #1
 800156e:	f000 fb9f 	bl	8001cb0 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 800157a:	f001 faba 	bl	8002af2 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800157e:	4628      	mov	r0, r5
 8001580:	b007      	add	sp, #28
 8001582:	bd30      	pop	{r4, r5, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	007a1200 	.word	0x007a1200

0800158c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <config_enable_default_clocks+0x1c>)
 800158e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8001598:	b082      	sub	sp, #8
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015a0:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80015a2:	b002      	add	sp, #8
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80015ac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <uart_console_init+0x24>)
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <uart_console_init+0x28>)
 80015b2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 80015b4:	f001 fca9 	bl	8002f0a <z_device_ready>
 80015b8:	b138      	cbz	r0, 80015ca <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <uart_console_init+0x2c>)
 80015bc:	f7ff fe9c 	bl	80012f8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <uart_console_init+0x2c>)
 80015c2:	f7fe ff8d 	bl	80004e0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80015c6:	2000      	movs	r0, #0
}
 80015c8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80015ca:	f06f 0012 	mvn.w	r0, #18
 80015ce:	e7fb      	b.n	80015c8 <uart_console_init+0x1c>
 80015d0:	2000023c 	.word	0x2000023c
 80015d4:	08003224 	.word	0x08003224
 80015d8:	080015dd 	.word	0x080015dd

080015dc <console_out>:
	if ('\n' == c) {
 80015dc:	280a      	cmp	r0, #10
{
 80015de:	b538      	push	{r3, r4, r5, lr}
 80015e0:	4d07      	ldr	r5, [pc, #28]	; (8001600 <console_out+0x24>)
 80015e2:	4604      	mov	r4, r0
	if ('\n' == c) {
 80015e4:	d104      	bne.n	80015f0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80015e6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80015e8:	6883      	ldr	r3, [r0, #8]
 80015ea:	210d      	movs	r1, #13
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80015f0:	6828      	ldr	r0, [r5, #0]
 80015f2:	6883      	ldr	r3, [r0, #8]
 80015f4:	b2e1      	uxtb	r1, r4
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4798      	blx	r3
}
 80015fa:	4620      	mov	r0, r4
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	2000023c 	.word	0x2000023c

08001604 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4605      	mov	r5, r0
 8001608:	4c07      	ldr	r4, [pc, #28]	; (8001628 <clock_control_on.constprop.0+0x24>)
 800160a:	4620      	mov	r0, r4
 800160c:	f001 fc7d 	bl	8002f0a <z_device_ready>
 8001610:	b130      	cbz	r0, 8001620 <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	4629      	mov	r1, r5
 8001616:	4620      	mov	r0, r4
 8001618:	681b      	ldr	r3, [r3, #0]
}
 800161a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 800161e:	4718      	bx	r3
}
 8001620:	f06f 0012 	mvn.w	r0, #18
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	bf00      	nop
 8001628:	08003134 	.word	0x08003134

0800162c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 800162c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800162e:	460c      	mov	r4, r1
 8001630:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8001632:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8001636:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001638:	6902      	ldr	r2, [r0, #16]
{
 800163a:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800163c:	d123      	bne.n	8001686 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800163e:	f004 0303 	and.w	r3, r4, #3
 8001642:	3304      	adds	r3, #4
 8001644:	009a      	lsls	r2, r3, #2
 8001646:	230f      	movs	r3, #15
 8001648:	4093      	lsls	r3, r2
 800164a:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4933      	ldr	r1, [pc, #204]	; (8001720 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001652:	3202      	adds	r2, #2
 8001654:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001658:	0c19      	lsrs	r1, r3, #16
 800165a:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001662:	fab2 f282 	clz	r2, r2
 8001666:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	d109      	bne.n	8001682 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe76 	bl	8001360 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fec7 	bl	8001408 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800167a:	2100      	movs	r1, #0
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fe7d 	bl	800137c <stm32_exti_trigger>
	int err = 0;
 8001682:	2500      	movs	r5, #0
 8001684:	e03e      	b.n	8001704 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001686:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800168a:	d042      	beq.n	8001712 <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800168c:	4925      	ldr	r1, [pc, #148]	; (8001724 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff fea8 	bl	80013e4 <stm32_exti_set_callback>
 8001694:	4605      	mov	r5, r0
 8001696:	2800      	cmp	r0, #0
 8001698:	d13e      	bne.n	8001718 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800169c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800169e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a2:	466b      	mov	r3, sp
 80016a4:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffab 	bl	8001604 <clock_control_on.constprop.0>
	if (ret != 0) {
 80016ae:	b9c0      	cbnz	r0, 80016e2 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80016b0:	f004 0103 	and.w	r1, r4, #3
 80016b4:	3104      	adds	r1, #4
 80016b6:	008b      	lsls	r3, r1, #2
 80016b8:	210f      	movs	r1, #15
 80016ba:	4099      	lsls	r1, r3
 80016bc:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016c8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80016cc:	0c0b      	lsrs	r3, r1, #16
 80016ce:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80016dc:	409f      	lsls	r7, r3
 80016de:	430f      	orrs	r7, r1
 80016e0:	6097      	str	r7, [r2, #8]

	switch (trig) {
 80016e2:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80016e6:	d010      	beq.n	800170a <gpio_stm32_pin_interrupt_configure+0xde>
 80016e8:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80016ec:	d00f      	beq.n	800170e <gpio_stm32_pin_interrupt_configure+0xe2>
 80016ee:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80016f2:	bf14      	ite	ne
 80016f4:	2100      	movne	r1, #0
 80016f6:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fe3f 	bl	800137c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fe20 	bl	8001344 <stm32_exti_enable>

exit:
	return err;
}
 8001704:	4628      	mov	r0, r5
 8001706:	b003      	add	sp, #12
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800170a:	2101      	movs	r1, #1
 800170c:	e7f4      	b.n	80016f8 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 800170e:	2103      	movs	r1, #3
 8001710:	e7f2      	b.n	80016f8 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8001712:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001716:	e7f5      	b.n	8001704 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8001718:	f06f 050f 	mvn.w	r5, #15
	return err;
 800171c:	e7f2      	b.n	8001704 <gpio_stm32_pin_interrupt_configure+0xd8>
 800171e:	bf00      	nop
 8001720:	40013800 	.word	0x40013800
 8001724:	08002d1f 	.word	0x08002d1f
 8001728:	0800356c 	.word	0x0800356c

0800172c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800172c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001730:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001732:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001734:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80017fc <uart_stm32_init+0xd0>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001738:	46b1      	mov	r9, r6
{
 800173a:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800173c:	f859 4b08 	ldr.w	r4, [r9], #8
	data->clock = clk;
 8001740:	f8c7 8004 	str.w	r8, [r7, #4]
 8001744:	4640      	mov	r0, r8
 8001746:	f001 fbe0 	bl	8002f0a <z_device_ready>
 800174a:	b920      	cbnz	r0, 8001756 <uart_stm32_init+0x2a>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 800174c:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001750:	b003      	add	sp, #12
 8001752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8001756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800175a:	4640      	mov	r0, r8
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4649      	mov	r1, r9
 8001760:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8001762:	4680      	mov	r8, r0
 8001764:	2800      	cmp	r0, #0
 8001766:	d1f1      	bne.n	800174c <uart_stm32_init+0x20>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001768:	4601      	mov	r1, r0
 800176a:	aa01      	add	r2, sp, #4
 800176c:	69b0      	ldr	r0, [r6, #24]
 800176e:	f001 fbb3 	bl	8002ed8 <pinctrl_lookup_state>
	if (ret < 0) {
 8001772:	2800      	cmp	r0, #0
 8001774:	dbec      	blt.n	8001750 <uart_stm32_init+0x24>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8001776:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001778:	4642      	mov	r2, r8
 800177a:	7919      	ldrb	r1, [r3, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f000 f9bb 	bl	8001af8 <pinctrl_configure_pins>
	if (err < 0) {
 8001782:	2800      	cmp	r0, #0
 8001784:	dbe4      	blt.n	8001750 <uart_stm32_init+0x24>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001786:	68e3      	ldr	r3, [r4, #12]
 8001788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178c:	60e3      	str	r3, [r4, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178e:	f104 030c 	add.w	r3, r4, #12
 8001792:	e853 3f00 	ldrex	r3, [r3]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001796:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800179a:	f104 010c 	add.w	r1, r4, #12
 800179e:	e841 3200 	strex	r2, r3, [r1]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d1f3      	bne.n	800178e <uart_stm32_init+0x62>
	if (config->parity == 2) {
 80017a6:	6973      	ldr	r3, [r6, #20]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d022      	beq.n	80017f2 <uart_stm32_init+0xc6>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	bf0a      	itet	eq
 80017b0:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 80017b4:	2100      	movne	r1, #0
 80017b6:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80017ba:	68e3      	ldr	r3, [r4, #12]
 80017bc:	430a      	orrs	r2, r1
 80017be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017cc:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 80017ce:	7c33      	ldrb	r3, [r6, #16]
 80017d0:	b12b      	cbz	r3, 80017de <uart_stm32_init+0xb2>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80017d2:	686b      	ldr	r3, [r5, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80017d6:	6953      	ldr	r3, [r2, #20]
 80017d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017dc:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80017de:	4628      	mov	r0, r5
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	f001 fb0a 	bl	8002dfa <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017e6:	68e3      	ldr	r3, [r4, #12]
 80017e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ec:	60e3      	str	r3, [r4, #12]
	return 0;
 80017ee:	2000      	movs	r0, #0
 80017f0:	e7ae      	b.n	8001750 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80017f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fa:	e7de      	b.n	80017ba <uart_stm32_init+0x8e>
 80017fc:	08003134 	.word	0x08003134

08001800 <uart_stm32_configure>:
{
 8001800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001804:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001806:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001808:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800180a:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800180c:	2a01      	cmp	r2, #1
{
 800180e:	460d      	mov	r5, r1
	switch (parity) {
 8001810:	d07c      	beq.n	800190c <uart_stm32_configure+0x10c>
		return LL_USART_PARITY_NONE;
 8001812:	2a02      	cmp	r2, #2
 8001814:	bf0c      	ite	eq
 8001816:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800181a:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800181c:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001820:	f895 e006 	ldrb.w	lr, [r5, #6]
 8001824:	f1b9 0f02 	cmp.w	r9, #2
 8001828:	bf96      	itet	ls
 800182a:	4b3d      	ldrls	r3, [pc, #244]	; (8001920 <uart_stm32_configure+0x120>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800182c:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8001830:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8001834:	f1be 0f04 	cmp.w	lr, #4
 8001838:	d06b      	beq.n	8001912 <uart_stm32_configure+0x112>
		return LL_USART_DATAWIDTH_9B;
 800183a:	2a00      	cmp	r2, #0
 800183c:	bf0c      	ite	eq
 800183e:	2300      	moveq	r3, #0
 8001840:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001844:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001846:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800184a:	2f01      	cmp	r7, #1
 800184c:	bf14      	ite	ne
 800184e:	f04f 0c00 	movne.w	ip, #0
 8001852:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001856:	f1ba 0f01 	cmp.w	sl, #1
 800185a:	d95d      	bls.n	8001918 <uart_stm32_configure+0x118>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800185c:	b112      	cbz	r2, 8001864 <uart_stm32_configure+0x64>
 800185e:	f1be 0f04 	cmp.w	lr, #4
 8001862:	d059      	beq.n	8001918 <uart_stm32_configure+0x118>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001864:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001868:	d056      	beq.n	8001918 <uart_stm32_configure+0x118>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800186a:	f1be 0f02 	cmp.w	lr, #2
 800186e:	d953      	bls.n	8001918 <uart_stm32_configure+0x118>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8001870:	f1be 0f04 	cmp.w	lr, #4
 8001874:	d050      	beq.n	8001918 <uart_stm32_configure+0x118>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001876:	b167      	cbz	r7, 8001892 <uart_stm32_configure+0x92>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <uart_stm32_configure+0x124>)
 800187a:	4294      	cmp	r4, r2
 800187c:	d007      	beq.n	800188e <uart_stm32_configure+0x8e>
 800187e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001882:	4294      	cmp	r4, r2
 8001884:	d003      	beq.n	800188e <uart_stm32_configure+0x8e>
 8001886:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800188a:	4294      	cmp	r4, r2
 800188c:	d144      	bne.n	8001918 <uart_stm32_configure+0x118>
 800188e:	2f01      	cmp	r7, #1
 8001890:	d142      	bne.n	8001918 <uart_stm32_configure+0x118>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001892:	68e2      	ldr	r2, [r4, #12]
 8001894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001898:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800189a:	68e2      	ldr	r2, [r4, #12]
 800189c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80018a0:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80018a2:	bf1f      	itttt	ne
 80018a4:	68e7      	ldrne	r7, [r4, #12]
 80018a6:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 80018aa:	430f      	orrne	r7, r1
 80018ac:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80018ae:	6922      	ldr	r2, [r4, #16]
 80018b0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80018b4:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018b6:	bf1f      	itttt	ne
 80018b8:	6921      	ldrne	r1, [r4, #16]
 80018ba:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80018be:	ea41 0108 	orrne.w	r1, r1, r8
 80018c2:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80018c4:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 80018c6:	6829      	ldr	r1, [r5, #0]
 80018c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80018cc:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80018ce:	bf1f      	itttt	ne
 80018d0:	68e2      	ldrne	r2, [r4, #12]
 80018d2:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80018d6:	431a      	orrne	r2, r3
 80018d8:	60e2      	strne	r2, [r4, #12]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80018da:	6963      	ldr	r3, [r4, #20]
 80018dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80018e0:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80018e2:	bf1f      	itttt	ne
 80018e4:	6963      	ldrne	r3, [r4, #20]
 80018e6:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80018ea:	ea43 030c 	orrne.w	r3, r3, ip
 80018ee:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 80018f0:	6833      	ldr	r3, [r6, #0]
 80018f2:	4299      	cmp	r1, r3
 80018f4:	d003      	beq.n	80018fe <uart_stm32_configure+0xfe>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80018f6:	f001 fa80 	bl	8002dfa <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018fe:	68e3      	ldr	r3, [r4, #12]
 8001900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001904:	60e3      	str	r3, [r4, #12]
	return 0;
 8001906:	2000      	movs	r0, #0
};
 8001908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 800190c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001910:	e784      	b.n	800181c <uart_stm32_configure+0x1c>
		return LL_USART_DATAWIDTH_9B;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	e795      	b.n	8001844 <uart_stm32_configure+0x44>
		return -ENOTSUP;
 8001918:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800191c:	e7f4      	b.n	8001908 <uart_stm32_configure+0x108>
 800191e:	bf00      	nop
 8001920:	08003734 	.word	0x08003734
 8001924:	40011000 	.word	0x40011000

08001928 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800192c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800192e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001930:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001932:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <elapsed+0x34>)
 8001936:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800193a:	4909      	ldr	r1, [pc, #36]	; (8001960 <elapsed+0x38>)
 800193c:	d101      	bne.n	8001942 <elapsed+0x1a>
	    || (val1 < val2)) {
 800193e:	4282      	cmp	r2, r0
 8001940:	d206      	bcs.n	8001950 <elapsed+0x28>
		overflow_cyc += last_load;
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	680c      	ldr	r4, [r1, #0]
 8001946:	4422      	add	r2, r4
 8001948:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800194a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800194e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	680a      	ldr	r2, [r1, #0]
 8001954:	4413      	add	r3, r2
}
 8001956:	1a18      	subs	r0, r3, r0
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	200002cc 	.word	0x200002cc
 8001960:	200002c8 	.word	0x200002c8

08001964 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <sys_clock_driver_init+0x28>)
 8001966:	2210      	movs	r2, #16
 8001968:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <sys_clock_driver_init+0x2c>)
 800196e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001972:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <sys_clock_driver_init+0x30>)
 8001976:	2000      	movs	r0, #0
 8001978:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800197a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800197e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001980:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	f042 0207 	orr.w	r2, r2, #7
 8001988:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	200002c8 	.word	0x200002c8
 8001994:	200002cc 	.word	0x200002cc

08001998 <sys_clock_isr>:
{
 8001998:	b508      	push	{r3, lr}
	elapsed();
 800199a:	f7ff ffc5 	bl	8001928 <elapsed>
	cycle_count += overflow_cyc;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <sys_clock_isr+0x38>)
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <sys_clock_isr+0x3c>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	6811      	ldr	r1, [r2, #0]
 80019a6:	4408      	add	r0, r1
 80019a8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <sys_clock_isr+0x40>)
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f242 01d0 	movw	r1, #8400	; 0x20d0
 80019b6:	1ac0      	subs	r0, r0, r3
 80019b8:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 80019bc:	fb01 3300 	mla	r3, r1, r0, r3
 80019c0:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80019c2:	f000 fedf 	bl	8002784 <sys_clock_announce>
}
 80019c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80019ca:	f7ff ba93 	b.w	8000ef4 <z_arm_exc_exit>
 80019ce:	bf00      	nop
 80019d0:	200002cc 	.word	0x200002cc
 80019d4:	200002c4 	.word	0x200002c4
 80019d8:	200002c0 	.word	0x200002c0

080019dc <sys_clock_set_timeout>:
{
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019de:	4d32      	ldr	r5, [pc, #200]	; (8001aa8 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80019e0:	b159      	cbz	r1, 80019fa <sys_clock_set_timeout+0x1e>
 80019e2:	1c43      	adds	r3, r0, #1
 80019e4:	d109      	bne.n	80019fa <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80019e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80019ea:	6913      	ldr	r3, [r2, #16]
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80019f2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80019f6:	602b      	str	r3, [r5, #0]
}
 80019f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80019fa:	f240 73cc 	movw	r3, #1996	; 0x7cc
 80019fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a02:	bf08      	it	eq
 8001a04:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001a06:	1e44      	subs	r4, r0, #1
 8001a08:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8001a0a:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001a0c:	dd32      	ble.n	8001a74 <sys_clock_set_timeout+0x98>
 8001a0e:	429c      	cmp	r4, r3
 8001a10:	bfa8      	it	ge
 8001a12:	461c      	movge	r4, r3
	__asm__ volatile(
 8001a14:	f04f 0310 	mov.w	r3, #16
 8001a18:	f3ef 8611 	mrs	r6, BASEPRI
 8001a1c:	f383 8812 	msr	BASEPRI_MAX, r3
 8001a20:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001a24:	f7ff ff80 	bl	8001928 <elapsed>
	cycle_count += pending;
 8001a28:	4920      	ldr	r1, [pc, #128]	; (8001aac <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001a2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001a2e:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001a30:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001a34:	680b      	ldr	r3, [r1, #0]
 8001a36:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8001a3a:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8001a3c:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <sys_clock_set_timeout+0xd8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001a42:	1ac2      	subs	r2, r0, r3
 8001a44:	d518      	bpl.n	8001a78 <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001a4a:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8001a4c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8001a50:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8001a52:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8001a54:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8001a56:	bf38      	it	cc
 8001a58:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8001a5a:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8001a5c:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8001a60:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8001a62:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8001a64:	2400      	movs	r4, #0
 8001a66:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8001a68:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8001a6a:	f386 8811 	msr	BASEPRI, r6
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	e7c1      	b.n	80019f8 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001a74:	2400      	movs	r4, #0
 8001a76:	e7cd      	b.n	8001a14 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8001a78:	f242 0ed0 	movw	lr, #8400	; 0x20d0
		delay += unannounced;
 8001a7c:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001a80:	f504 5403 	add.w	r4, r4, #8384	; 0x20c0
		delay -= unannounced;
 8001a84:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001a86:	340f      	adds	r4, #15
 8001a88:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8001a8c:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8001a90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001a94:	d904      	bls.n	8001aa0 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <sys_clock_set_timeout+0xdc>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	d8d6      	bhi.n	8001a4a <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8001a9c:	602c      	str	r4, [r5, #0]
 8001a9e:	e7d5      	b.n	8001a4c <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8001aa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001aa4:	e7fa      	b.n	8001a9c <sys_clock_set_timeout+0xc0>
 8001aa6:	bf00      	nop
 8001aa8:	200002c8 	.word	0x200002c8
 8001aac:	200002c4 	.word	0x200002c4
 8001ab0:	200002cc 	.word	0x200002cc
 8001ab4:	200002c0 	.word	0x200002c0
 8001ab8:	00ffd5c0 	.word	0x00ffd5c0

08001abc <sys_clock_elapsed>:
{
 8001abc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001abe:	f04f 0310 	mov.w	r3, #16
 8001ac2:	f3ef 8411 	mrs	r4, BASEPRI
 8001ac6:	f383 8812 	msr	BASEPRI_MAX, r3
 8001aca:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001ace:	f7ff ff2b 	bl	8001928 <elapsed>
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <sys_clock_elapsed+0x34>)
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <sys_clock_elapsed+0x38>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	4403      	add	r3, r0
	__asm__ volatile(
 8001ade:	f384 8811 	msr	BASEPRI, r4
 8001ae2:	f3bf 8f6f 	isb	sy
}
 8001ae6:	f242 00d0 	movw	r0, #8400	; 0x20d0
 8001aea:	fbb3 f0f0 	udiv	r0, r3, r0
 8001aee:	bd10      	pop	{r4, pc}
 8001af0:	200002c4 	.word	0x200002c4
 8001af4:	200002c0 	.word	0x200002c0

08001af8 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001afc:	4f1c      	ldr	r7, [pc, #112]	; (8001b70 <pinctrl_configure_pins+0x78>)
 8001afe:	4604      	mov	r4, r0
 8001b00:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 8001b04:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001b06:	42b4      	cmp	r4, r6
 8001b08:	d101      	bne.n	8001b0e <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e014      	b.n	8001b38 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001b0e:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b10:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b12:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b16:	d411      	bmi.n	8001b3c <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001b18:	6865      	ldr	r5, [r4, #4]
 8001b1a:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001b1e:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001b22:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001b26:	280a      	cmp	r0, #10
 8001b28:	d81e      	bhi.n	8001b68 <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001b2a:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001b2e:	f1b8 0f00 	cmp.w	r8, #0
 8001b32:	d108      	bne.n	8001b46 <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 8001b34:	f06f 0012 	mvn.w	r0, #18
}
 8001b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 8001b3c:	f1b9 0f10 	cmp.w	r9, #16
 8001b40:	bf08      	it	eq
 8001b42:	2530      	moveq	r5, #48	; 0x30
 8001b44:	e7eb      	b.n	8001b1e <pinctrl_configure_pins+0x26>
 8001b46:	4640      	mov	r0, r8
 8001b48:	f001 f9df 	bl	8002f0a <z_device_ready>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d0f1      	beq.n	8001b34 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8001b50:	464b      	mov	r3, r9
 8001b52:	462a      	mov	r2, r5
 8001b54:	f00a 010f 	and.w	r1, sl, #15
 8001b58:	4640      	mov	r0, r8
 8001b5a:	f001 f8f3 	bl	8002d44 <gpio_stm32_configure>
		if (ret < 0) {
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	f104 0408 	add.w	r4, r4, #8
 8001b64:	dacf      	bge.n	8001b06 <pinctrl_configure_pins+0xe>
 8001b66:	e7e7      	b.n	8001b38 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001b68:	f06f 0015 	mvn.w	r0, #21
 8001b6c:	e7e4      	b.n	8001b38 <pinctrl_configure_pins+0x40>
 8001b6e:	bf00      	nop
 8001b70:	080036f0 	.word	0x080036f0

08001b74 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <UTILS_PLL_IsBusy+0x18>)
 8001b76:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001b78:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b7a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001b82:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8001b84:	bf14      	ite	ne
 8001b86:	2001      	movne	r0, #1
 8001b88:	2000      	moveq	r0, #0
 8001b8a:	4770      	bx	lr
 8001b8c:	40023800 	.word	0x40023800

08001b90 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d034      	beq.n	8001bfe <LL_SetFlashLatency+0x6e>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <LL_SetFlashLatency+0x7c>)
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	6813      	ldr	r3, [r2, #0]
 8001b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba2:	d115      	bne.n	8001bd0 <LL_SetFlashLatency+0x40>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <LL_SetFlashLatency+0x80>)
 8001ba6:	4298      	cmp	r0, r3
 8001ba8:	d814      	bhi.n	8001bd4 <LL_SetFlashLatency+0x44>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <LL_SetFlashLatency+0x84>)
 8001bac:	4298      	cmp	r0, r3
 8001bae:	bf94      	ite	ls
 8001bb0:	2300      	movls	r3, #0
 8001bb2:	2301      	movhi	r3, #1
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001bba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001bbe:	d10e      	bne.n	8001bde <LL_SetFlashLatency+0x4e>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bc0:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <LL_SetFlashLatency+0x80>)
 8001bc2:	4290      	cmp	r0, r2
 8001bc4:	d908      	bls.n	8001bd8 <LL_SetFlashLatency+0x48>
 8001bc6:	b1e3      	cbz	r3, 8001c02 <LL_SetFlashLatency+0x72>
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	bf38      	it	cc
 8001bcc:	2301      	movcc	r3, #1
 8001bce:	e006      	b.n	8001bde <LL_SetFlashLatency+0x4e>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e7ef      	b.n	8001bb4 <LL_SetFlashLatency+0x24>
        latency = LL_FLASH_LATENCY_2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e7ed      	b.n	8001bb4 <LL_SetFlashLatency+0x24>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LL_SetFlashLatency+0x84>)
 8001bda:	4290      	cmp	r0, r2
 8001bdc:	d8f4      	bhi.n	8001bc8 <LL_SetFlashLatency+0x38>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <LL_SetFlashLatency+0x88>)
 8001be0:	680a      	ldr	r2, [r1, #0]
 8001be2:	f022 0207 	bic.w	r2, r2, #7
 8001be6:	431a      	orrs	r2, r3
 8001be8:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bea:	680a      	ldr	r2, [r1, #0]
 8001bec:	f002 0207 	and.w	r2, r2, #7
    } while ((getlatency != latency) && (timeout > 0));
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d008      	beq.n	8001c06 <LL_SetFlashLatency+0x76>
 8001bf4:	680a      	ldr	r2, [r1, #0]
 8001bf6:	f002 0207 	and.w	r2, r2, #7
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <LL_SetFlashLatency+0x76>
    status = ERROR;
 8001bfe:	2001      	movs	r0, #1
 8001c00:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	e7eb      	b.n	8001bde <LL_SetFlashLatency+0x4e>
      status = SUCCESS;
 8001c06:	2000      	movs	r0, #0
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	03938700 	.word	0x03938700
 8001c14:	01c9c380 	.word	0x01c9c380
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c1c:	680b      	ldr	r3, [r1, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8001c20:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c26:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001c28:	4e1f      	ldr	r6, [pc, #124]	; (8001ca8 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c2a:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001c2e:	6833      	ldr	r3, [r6, #0]
 8001c30:	42a3      	cmp	r3, r4
{
 8001c32:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001c34:	d327      	bcc.n	8001c86 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c3e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001c40:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001c42:	0192      	lsls	r2, r2, #6
 8001c44:	d5fc      	bpl.n	8001c40 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	6829      	ldr	r1, [r5, #0]
 8001c4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	f022 0203 	bic.w	r2, r2, #3
 8001c58:	f042 0202 	orr.w	r2, r2, #2
 8001c5c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c66:	2a08      	cmp	r2, #8
 8001c68:	d1fa      	bne.n	8001c60 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	6869      	ldr	r1, [r5, #4]
 8001c6e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68a9      	ldr	r1, [r5, #8]
 8001c7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
}
 8001c82:	2000      	movs	r0, #0
 8001c84:	e004      	b.n	8001c90 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff ff82 	bl	8001b90 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d0d2      	beq.n	8001c36 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	42a3      	cmp	r3, r4
 8001c94:	d902      	bls.n	8001c9c <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff ff7a 	bl	8001b90 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001c9c:	b900      	cbnz	r0, 8001ca0 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 8001c9e:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}
 8001ca2:	bf00      	nop
 8001ca4:	080037cf 	.word	0x080037cf
 8001ca8:	20000030 	.word	0x20000030
 8001cac:	40023800 	.word	0x40023800

08001cb0 <LL_PLL_ConfigSystemClock_HSE>:
{
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	460e      	mov	r6, r1
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001cba:	f7ff ff5b 	bl	8001b74 <UTILS_PLL_IsBusy>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d136      	bne.n	8001d30 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001cc2:	6827      	ldr	r7, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001cc4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cc8:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001cca:	4c1a      	ldr	r4, [pc, #104]	; (8001d34 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001ccc:	f007 003f 	and.w	r0, r7, #63	; 0x3f
 8001cd0:	fbb5 f5f0 	udiv	r5, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001cd4:	f3cc 0008 	ubfx	r0, ip, #0, #9
 8001cd8:	4345      	muls	r5, r0
 8001cda:	6822      	ldr	r2, [r4, #0]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cdc:	0c18      	lsrs	r0, r3, #16
 8001cde:	3001      	adds	r0, #1
 8001ce0:	0040      	lsls	r0, r0, #1
 8001ce2:	fbb5 f0f0 	udiv	r0, r5, r0
    if(LL_RCC_HSE_IsReady() != 1U)
 8001ce6:	0395      	lsls	r5, r2, #14
 8001ce8:	d40f      	bmi.n	8001d0a <LL_PLL_ConfigSystemClock_HSE+0x5a>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001cea:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001cec:	2e01      	cmp	r6, #1
 8001cee:	bf0c      	ite	eq
 8001cf0:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001cf4:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001cf8:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001cfa:	6825      	ldr	r5, [r4, #0]
 8001cfc:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8001d00:	6025      	str	r5, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001d02:	4c0c      	ldr	r4, [pc, #48]	; (8001d34 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001d04:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001d06:	0392      	lsls	r2, r2, #14
 8001d08:	d5fc      	bpl.n	8001d04 <LL_PLL_ConfigSystemClock_HSE+0x54>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001d0a:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001d0e:	6865      	ldr	r5, [r4, #4]
 8001d10:	402a      	ands	r2, r5
 8001d12:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8001d16:	433a      	orrs	r2, r7
 8001d18:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d1c:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001d1e:	6862      	ldr	r2, [r4, #4]
 8001d20:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d24:	431a      	orrs	r2, r3
 8001d26:	6062      	str	r2, [r4, #4]
}
 8001d28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001d2c:	f7ff bf76 	b.w	8001c1c <UTILS_EnablePLLAndSwitchSystem>
}
 8001d30:	2001      	movs	r0, #1
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	ffbf8000 	.word	0xffbf8000

08001d3c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <z_sys_init_run_level+0x3c>)
{
 8001d3e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001d40:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001d44:	3001      	adds	r0, #1
 8001d46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001d4a:	42a6      	cmp	r6, r4
 8001d4c:	d800      	bhi.n	8001d50 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001d50:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001d54:	4628      	mov	r0, r5
 8001d56:	4798      	blx	r3
		if (dev != NULL) {
 8001d58:	b165      	cbz	r5, 8001d74 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8001d5a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8001d5c:	b130      	cbz	r0, 8001d6c <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	bfb8      	it	lt
 8001d62:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001d64:	28ff      	cmp	r0, #255	; 0xff
 8001d66:	bfa8      	it	ge
 8001d68:	20ff      	movge	r0, #255	; 0xff
 8001d6a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001d6c:	785a      	ldrb	r2, [r3, #1]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001d74:	3408      	adds	r4, #8
 8001d76:	e7e8      	b.n	8001d4a <z_sys_init_run_level+0xe>
 8001d78:	0800371c 	.word	0x0800371c

08001d7c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8001d7e:	4605      	mov	r5, r0
 8001d80:	b910      	cbnz	r0, 8001d88 <z_impl_device_get_binding+0xc>
		return NULL;
 8001d82:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8001d84:	4620      	mov	r0, r4
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8001d88:	7803      	ldrb	r3, [r0, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f9      	beq.n	8001d82 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001d8e:	4c0e      	ldr	r4, [pc, #56]	; (8001dc8 <z_impl_device_get_binding+0x4c>)
 8001d90:	4e0e      	ldr	r6, [pc, #56]	; (8001dcc <z_impl_device_get_binding+0x50>)
 8001d92:	42b4      	cmp	r4, r6
 8001d94:	d108      	bne.n	8001da8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001d96:	4c0c      	ldr	r4, [pc, #48]	; (8001dc8 <z_impl_device_get_binding+0x4c>)
 8001d98:	42b4      	cmp	r4, r6
 8001d9a:	d0f2      	beq.n	8001d82 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f001 f8b4 	bl	8002f0a <z_device_ready>
 8001da2:	b950      	cbnz	r0, 8001dba <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001da4:	3418      	adds	r4, #24
 8001da6:	e7f7      	b.n	8001d98 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8001da8:	4620      	mov	r0, r4
 8001daa:	f001 f8ae 	bl	8002f0a <z_device_ready>
 8001dae:	b110      	cbz	r0, 8001db6 <z_impl_device_get_binding+0x3a>
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	42ab      	cmp	r3, r5
 8001db4:	d0e6      	beq.n	8001d84 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001db6:	3418      	adds	r4, #24
 8001db8:	e7eb      	b.n	8001d92 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001dba:	6821      	ldr	r1, [r4, #0]
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f000 fdfb 	bl	80029b8 <strcmp>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d1ee      	bne.n	8001da4 <z_impl_device_get_binding+0x28>
 8001dc6:	e7dd      	b.n	8001d84 <z_impl_device_get_binding+0x8>
 8001dc8:	08003134 	.word	0x08003134
 8001dcc:	08003254 	.word	0x08003254

08001dd0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8001dd0:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 8001dd2:	2300      	movs	r3, #0
{
 8001dd4:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ddc:	220f      	movs	r2, #15
 8001dde:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001de2:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
 8001de4:	4c0c      	ldr	r4, [pc, #48]	; (8001e18 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
 8001de8:	490d      	ldr	r1, [pc, #52]	; (8001e20 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001dea:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
 8001dec:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001df0:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
 8001df4:	f44f 75b0 	mov.w	r5, #352	; 0x160
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	fb05 1100 	mla	r1, r5, r0, r1
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <init_idle_thread+0x54>)
 8001e00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 f8a3 	bl	8001f50 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001e0a:	7b63      	ldrb	r3, [r4, #13]
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8001e12:	b007      	add	sp, #28
 8001e14:	bd30      	pop	{r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	20000070 	.word	0x20000070
 8001e1c:	200002d0 	.word	0x200002d0
 8001e20:	20000740 	.word	0x20000740
 8001e24:	08002f6d 	.word	0x08002f6d

08001e28 <bg_thread_main>:
{
 8001e28:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <bg_thread_main+0x2c>)
 8001e2c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e2e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001e30:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e32:	f7ff ff83 	bl	8001d3c <z_sys_init_run_level>
	boot_banner();
 8001e36:	f000 fd19 	bl	800286c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f7ff ff7e 	bl	8001d3c <z_sys_init_run_level>
	z_init_static_threads();
 8001e40:	f000 f8b8 	bl	8001fb4 <z_init_static_threads>
	main();
 8001e44:	f7fe fb14 	bl	8000470 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001e48:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <bg_thread_main+0x30>)
 8001e4a:	7b13      	ldrb	r3, [r2, #12]
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	20000305 	.word	0x20000305
 8001e58:	200000f0 	.word	0x200000f0

08001e5c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <z_bss_zero+0xc>)
 8001e5e:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <z_bss_zero+0x10>)
 8001e60:	2100      	movs	r1, #0
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	f000 bdbf 	b.w	80029e6 <memset>
 8001e68:	20000070 	.word	0x20000070
 8001e6c:	20000308 	.word	0x20000308

08001e70 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8001e70:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001e72:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001f30 <z_cstart+0xc0>
 8001e76:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001e78:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001e7c:	4d2d      	ldr	r5, [pc, #180]	; (8001f34 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8001e7e:	4e2e      	ldr	r6, [pc, #184]	; (8001f38 <z_cstart+0xc8>)
 8001e80:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001e82:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8001f3c <z_cstart+0xcc>
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	2400      	movs	r4, #0
 8001e8c:	616b      	str	r3, [r5, #20]
 8001e8e:	23f0      	movs	r3, #240	; 0xf0
 8001e90:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001e94:	77ec      	strb	r4, [r5, #31]
 8001e96:	762c      	strb	r4, [r5, #24]
 8001e98:	766c      	strb	r4, [r5, #25]
 8001e9a:	76ac      	strb	r4, [r5, #26]
 8001e9c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001ea0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ea2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001ea6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001ea8:	f7ff f91a 	bl	80010e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001eac:	f7fe ff0e 	bl	8000ccc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001eb6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8001eb8:	f7ff f9ee 	bl	8001298 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8001ebc:	f7ff f956 	bl	800116c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001ec0:	f240 1301 	movw	r3, #257	; 0x101
 8001ec4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001ec8:	ab06      	add	r3, sp, #24
 8001eca:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8001ecc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8001ed0:	f001 f81a 	bl	8002f08 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff ff31 	bl	8001d3c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001eda:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 8001edc:	4d18      	ldr	r5, [pc, #96]	; (8001f40 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001ede:	f7ff ff2d 	bl	8001d3c <z_sys_init_run_level>
	z_sched_init();
 8001ee2:	f000 fa6b 	bl	80023bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <z_cstart+0xd4>)
 8001ee8:	9305      	str	r3, [sp, #20]
 8001eea:	2301      	movs	r3, #1
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <z_cstart+0xd8>)
 8001eee:	9400      	str	r4, [sp, #0]
 8001ef0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef8:	464b      	mov	r3, r9
 8001efa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001efe:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 8001f00:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f02:	f000 f825 	bl	8001f50 <z_setup_new_thread>
 8001f06:	7b6a      	ldrb	r2, [r5, #13]
 8001f08:	4607      	mov	r7, r0
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8001f0e:	4628      	mov	r0, r5
 8001f10:	736a      	strb	r2, [r5, #13]
 8001f12:	f001 f865 	bl	8002fe0 <z_ready_thread>
		init_idle_thread(i);
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7ff ff5a 	bl	8001dd0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <z_cstart+0xdc>)
 8001f1e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001f20:	464a      	mov	r2, r9
 8001f22:	4639      	mov	r1, r7
 8001f24:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
 8001f26:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
 8001f28:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001f2c:	f7fe ffb8 	bl	8000ea0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001f30:	200010c0 	.word	0x200010c0
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	200002d0 	.word	0x200002d0
 8001f3c:	08001e29 	.word	0x08001e29
 8001f40:	200000f0 	.word	0x200000f0
 8001f44:	080037df 	.word	0x080037df
 8001f48:	20000320 	.word	0x20000320
 8001f4c:	20000070 	.word	0x20000070

08001f50 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8001f50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8001f54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001f56:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8001f58:	2604      	movs	r6, #4
 8001f5a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8001f5c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001f5e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8001f60:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8001f64:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001f66:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8001f68:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8001f6e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001f70:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8001f74:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8001f76:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8001f7a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8001f7e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8001f80:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8001f82:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8001f84:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001f88:	9202      	str	r2, [sp, #8]
 8001f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f8c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8001f8e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f92:	9200      	str	r2, [sp, #0]
 8001f94:	4642      	mov	r2, r8
{
 8001f96:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8001f98:	f7fe ff50 	bl	8000e3c <arch_new_thread>
	if (!_current) {
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8001f9e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	b103      	cbz	r3, 8001fa6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8001fa6:	6723      	str	r3, [r4, #112]	; 0x70
}
 8001fa8:	4640      	mov	r0, r8
 8001faa:	b004      	add	sp, #16
 8001fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb0:	200002d0 	.word	0x200002d0

08001fb4 <z_init_static_threads>:
{
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	4c22      	ldr	r4, [pc, #136]	; (8002040 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8001fb8:	4d22      	ldr	r5, [pc, #136]	; (8002044 <z_init_static_threads+0x90>)
{
 8001fba:	b087      	sub	sp, #28
 8001fbc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 8001fbe:	42ae      	cmp	r6, r5
 8001fc0:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8001fc4:	d30b      	bcc.n	8001fde <z_init_static_threads+0x2a>
	k_sched_lock();
 8001fc6:	f000 f891 	bl	80020ec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8001fca:	4c1d      	ldr	r4, [pc, #116]	; (8002040 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8001fcc:	4f1e      	ldr	r7, [pc, #120]	; (8002048 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001fce:	260a      	movs	r6, #10
 8001fd0:	42ac      	cmp	r4, r5
 8001fd2:	d320      	bcc.n	8002016 <z_init_static_threads+0x62>
}
 8001fd4:	b007      	add	sp, #28
 8001fd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8001fda:	f000 b9d3 	b.w	8002384 <k_sched_unlock>
		z_setup_new_thread(
 8001fde:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001fe2:	9305      	str	r3, [sp, #20]
 8001fe4:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8001fe8:	9304      	str	r3, [sp, #16]
 8001fea:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002006:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800200a:	f7ff ffa1 	bl	8001f50 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800200e:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002012:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002014:	e7d2      	b.n	8001fbc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002018:	1c53      	adds	r3, r2, #1
 800201a:	d009      	beq.n	8002030 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800201c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002020:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002024:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002028:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800202a:	d103      	bne.n	8002034 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800202c:	f000 f942 	bl	80022b4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002030:	3430      	adds	r4, #48	; 0x30
 8002032:	e7cd      	b.n	8001fd0 <z_init_static_threads+0x1c>
 8002034:	4639      	mov	r1, r7
 8002036:	3018      	adds	r0, #24
 8002038:	f000 fb2a 	bl	8002690 <z_add_timeout>
 800203c:	e7f8      	b.n	8002030 <z_init_static_threads+0x7c>
 800203e:	bf00      	nop
 8002040:	2000006c 	.word	0x2000006c
 8002044:	2000006c 	.word	0x2000006c
 8002048:	08003001 	.word	0x08003001

0800204c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 800204c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800204e:	4c08      	ldr	r4, [pc, #32]	; (8002070 <z_reset_time_slice+0x24>)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	b15b      	cbz	r3, 800206c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002054:	f7ff fd32 	bl	8001abc <sys_clock_elapsed>
 8002058:	4603      	mov	r3, r0
 800205a:	6820      	ldr	r0, [r4, #0]
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <z_reset_time_slice+0x28>)
 800205e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002064:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8002066:	2100      	movs	r1, #0
 8002068:	f001 b802 	b.w	8003070 <z_set_timeout_expiry>
}
 800206c:	bd10      	pop	{r4, pc}
 800206e:	bf00      	nop
 8002070:	200002fc 	.word	0x200002fc
 8002074:	200002d0 	.word	0x200002d0

08002078 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8002078:	b510      	push	{r4, lr}
	__asm__ volatile(
 800207a:	f04f 0310 	mov.w	r3, #16
 800207e:	f3ef 8411 	mrs	r4, BASEPRI
 8002082:	f383 8812 	msr	BASEPRI_MAX, r3
 8002086:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <k_sched_time_slice_set+0x44>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002090:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 8002092:	f04f 030a 	mov.w	r3, #10
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <k_sched_time_slice_set+0x48>)
 8002098:	fb00 f303 	mul.w	r3, r0, r3
 800209c:	dc09      	bgt.n	80020b2 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 800209e:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <k_sched_time_slice_set+0x4c>)
 80020a2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80020a4:	f7ff ffd2 	bl	800204c <z_reset_time_slice>
	__asm__ volatile(
 80020a8:	f384 8811 	msr	BASEPRI, r4
 80020ac:	f3bf 8f6f 	isb	sy
	}
}
 80020b0:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	bfb8      	it	lt
 80020b6:	2302      	movlt	r3, #2
 80020b8:	e7f1      	b.n	800209e <k_sched_time_slice_set+0x26>
 80020ba:	bf00      	nop
 80020bc:	200002d0 	.word	0x200002d0
 80020c0:	200002fc 	.word	0x200002fc
 80020c4:	200002f8 	.word	0x200002f8

080020c8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80020c8:	b949      	cbnz	r1, 80020de <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ca:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80020ce:	b930      	cbnz	r0, 80020de <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <z_reschedule+0x16>
	ret = arch_swap(key);
 80020da:	f7fe be5b 	b.w	8000d94 <arch_swap>
 80020de:	f381 8811 	msr	BASEPRI, r1
 80020e2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80020e6:	4770      	bx	lr
 80020e8:	200002d0 	.word	0x200002d0

080020ec <k_sched_lock>:
	__asm__ volatile(
 80020ec:	f04f 0310 	mov.w	r3, #16
 80020f0:	f3ef 8111 	mrs	r1, BASEPRI
 80020f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80020f8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <k_sched_lock+0x24>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	7bd3      	ldrb	r3, [r2, #15]
 8002102:	3b01      	subs	r3, #1
 8002104:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8002106:	f381 8811 	msr	BASEPRI, r1
 800210a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800210e:	4770      	bx	lr
 8002110:	200002d0 	.word	0x200002d0

08002114 <update_cache>:
{
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <update_cache+0x38>)
 800211a:	4d0d      	ldr	r5, [pc, #52]	; (8002150 <update_cache+0x3c>)
 800211c:	f000 ff5a 	bl	8002fd4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002120:	4604      	mov	r4, r0
 8002122:	b900      	cbnz	r0, 8002126 <update_cache+0x12>
 8002124:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8002126:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8002128:	b94a      	cbnz	r2, 800213e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800212a:	7b5a      	ldrb	r2, [r3, #13]
 800212c:	06d2      	lsls	r2, r2, #27
 800212e:	d106      	bne.n	800213e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002130:	69a2      	ldr	r2, [r4, #24]
 8002132:	b922      	cbnz	r2, 800213e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002134:	89da      	ldrh	r2, [r3, #14]
 8002136:	2a7f      	cmp	r2, #127	; 0x7f
 8002138:	d901      	bls.n	800213e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800213a:	61ab      	str	r3, [r5, #24]
}
 800213c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800213e:	429c      	cmp	r4, r3
 8002140:	d001      	beq.n	8002146 <update_cache+0x32>
			z_reset_time_slice();
 8002142:	f7ff ff83 	bl	800204c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8002146:	61ac      	str	r4, [r5, #24]
}
 8002148:	e7f8      	b.n	800213c <update_cache+0x28>
 800214a:	bf00      	nop
 800214c:	200002ec 	.word	0x200002ec
 8002150:	200002d0 	.word	0x200002d0

08002154 <move_thread_to_end_of_prio_q>:
{
 8002154:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8002156:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800215a:	7b43      	ldrb	r3, [r0, #13]
 800215c:	2a00      	cmp	r2, #0
{
 800215e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002160:	da04      	bge.n	800216c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002166:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8002168:	f000 ff0c 	bl	8002f84 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800216c:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <move_thread_to_end_of_prio_q+0x70>)
 8002170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002174:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002176:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800217a:	f102 051c 	add.w	r5, r2, #28
 800217e:	42ab      	cmp	r3, r5
 8002180:	d01b      	beq.n	80021ba <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002182:	b1d3      	cbz	r3, 80021ba <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8002184:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002188:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 800218c:	4286      	cmp	r6, r0
 800218e:	d00f      	beq.n	80021b0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8002190:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002192:	2800      	cmp	r0, #0
 8002194:	dd0c      	ble.n	80021b0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8002196:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8002198:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800219c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800219e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80021a0:	6890      	ldr	r0, [r2, #8]
 80021a2:	1a43      	subs	r3, r0, r1
 80021a4:	4258      	negs	r0, r3
}
 80021a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80021aa:	4158      	adcs	r0, r3
 80021ac:	f7ff bfb2 	b.w	8002114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80021b0:	42a3      	cmp	r3, r4
 80021b2:	d002      	beq.n	80021ba <move_thread_to_end_of_prio_q+0x66>
 80021b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e6      	bne.n	8002188 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 80021ba:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 80021be:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80021c0:	6211      	str	r1, [r2, #32]
}
 80021c2:	e7ed      	b.n	80021a0 <move_thread_to_end_of_prio_q+0x4c>
 80021c4:	200002d0 	.word	0x200002d0

080021c8 <z_time_slice>:
{
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4601      	mov	r1, r0
	__asm__ volatile(
 80021cc:	f04f 0310 	mov.w	r3, #16
 80021d0:	f3ef 8411 	mrs	r4, BASEPRI
 80021d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80021d8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <z_time_slice+0x6c>)
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <z_time_slice+0x70>)
 80021e0:	6898      	ldr	r0, [r3, #8]
 80021e2:	6815      	ldr	r5, [r2, #0]
 80021e4:	42a8      	cmp	r0, r5
 80021e6:	d106      	bne.n	80021f6 <z_time_slice+0x2e>
			z_reset_time_slice();
 80021e8:	f7ff ff30 	bl	800204c <z_reset_time_slice>
	__asm__ volatile(
 80021ec:	f384 8811 	msr	BASEPRI, r4
 80021f0:	f3bf 8f6f 	isb	sy
}
 80021f4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80021f6:	2500      	movs	r5, #0
 80021f8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <z_time_slice+0x74>)
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	b1ba      	cbz	r2, 8002230 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8002200:	89c2      	ldrh	r2, [r0, #14]
 8002202:	2a7f      	cmp	r2, #127	; 0x7f
 8002204:	d814      	bhi.n	8002230 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 8002206:	7b42      	ldrb	r2, [r0, #13]
 8002208:	06d2      	lsls	r2, r2, #27
 800220a:	d111      	bne.n	8002230 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <z_time_slice+0x78>)
 800220e:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4295      	cmp	r5, r2
 8002216:	db0b      	blt.n	8002230 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <z_time_slice+0x7c>)
 800221a:	4290      	cmp	r0, r2
 800221c:	d008      	beq.n	8002230 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	428a      	cmp	r2, r1
 8002222:	dc02      	bgt.n	800222a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8002224:	f7ff ff96 	bl	8002154 <move_thread_to_end_of_prio_q>
 8002228:	e7de      	b.n	80021e8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 800222a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	e7dd      	b.n	80021ec <z_time_slice+0x24>
 8002230:	2200      	movs	r2, #0
 8002232:	e7fb      	b.n	800222c <z_time_slice+0x64>
 8002234:	200002d0 	.word	0x200002d0
 8002238:	200002f4 	.word	0x200002f4
 800223c:	200002fc 	.word	0x200002fc
 8002240:	200002f8 	.word	0x200002f8
 8002244:	20000070 	.word	0x20000070

08002248 <ready_thread>:
{
 8002248:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800224a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800224e:	7b43      	ldrb	r3, [r0, #13]
 8002250:	2a00      	cmp	r2, #0
 8002252:	db2a      	blt.n	80022aa <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002254:	06da      	lsls	r2, r3, #27
 8002256:	d128      	bne.n	80022aa <ready_thread+0x62>
 8002258:	6982      	ldr	r2, [r0, #24]
 800225a:	bb32      	cbnz	r2, 80022aa <ready_thread+0x62>
	return list->head == list;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800225e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002262:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8002264:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002268:	f102 051c 	add.w	r5, r2, #28
 800226c:	42ab      	cmp	r3, r5
 800226e:	d017      	beq.n	80022a0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002270:	b1b3      	cbz	r3, 80022a0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8002272:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8002276:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800227a:	428e      	cmp	r6, r1
 800227c:	d00b      	beq.n	8002296 <ready_thread+0x4e>
		return b2 - b1;
 800227e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002280:	2900      	cmp	r1, #0
 8002282:	dd08      	ble.n	8002296 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8002284:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002286:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800228a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800228c:	6058      	str	r0, [r3, #4]
}
 800228e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff bf3f 	b.w	8002114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002296:	42a3      	cmp	r3, r4
 8002298:	d002      	beq.n	80022a0 <ready_thread+0x58>
 800229a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ea      	bne.n	8002276 <ready_thread+0x2e>
	node->prev = tail;
 80022a0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80022a4:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80022a6:	6210      	str	r0, [r2, #32]
}
 80022a8:	e7f1      	b.n	800228e <ready_thread+0x46>
}
 80022aa:	bc70      	pop	{r4, r5, r6}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200002d0 	.word	0x200002d0

080022b4 <z_sched_start>:
{
 80022b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80022b6:	f04f 0210 	mov.w	r2, #16
 80022ba:	f3ef 8411 	mrs	r4, BASEPRI
 80022be:	f382 8812 	msr	BASEPRI_MAX, r2
 80022c2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80022c6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80022c8:	0751      	lsls	r1, r2, #29
 80022ca:	d404      	bmi.n	80022d6 <z_sched_start+0x22>
	__asm__ volatile(
 80022cc:	f384 8811 	msr	BASEPRI, r4
 80022d0:	f3bf 8f6f 	isb	sy
}
 80022d4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80022dc:	f7ff ffb4 	bl	8002248 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80022e0:	4621      	mov	r1, r4
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <z_sched_start+0x38>)
}
 80022e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80022e8:	f7ff beee 	b.w	80020c8 <z_reschedule>
 80022ec:	20000306 	.word	0x20000306

080022f0 <unready_thread>:
{
 80022f0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80022f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80022f6:	7b43      	ldrb	r3, [r0, #13]
 80022f8:	2a00      	cmp	r2, #0
{
 80022fa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80022fc:	da04      	bge.n	8002308 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80022fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002302:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002304:	f000 fe3e 	bl	8002f84 <sys_dlist_remove>
	update_cache(thread == _current);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <unready_thread+0x2c>)
 800230a:	6898      	ldr	r0, [r3, #8]
 800230c:	1a43      	subs	r3, r0, r1
 800230e:	4258      	negs	r0, r3
 8002310:	4158      	adcs	r0, r3
}
 8002312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8002316:	f7ff befd 	b.w	8002114 <update_cache>
 800231a:	bf00      	nop
 800231c:	200002d0 	.word	0x200002d0

08002320 <z_impl_k_thread_suspend>:
{
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002324:	3018      	adds	r0, #24
 8002326:	f000 fe8d 	bl	8003044 <z_abort_timeout>
	__asm__ volatile(
 800232a:	f04f 0310 	mov.w	r3, #16
 800232e:	f3ef 8611 	mrs	r6, BASEPRI
 8002332:	f383 8812 	msr	BASEPRI_MAX, r3
 8002336:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800233a:	f994 200d 	ldrsb.w	r2, [r4, #13]
 800233e:	7b63      	ldrb	r3, [r4, #13]
 8002340:	2a00      	cmp	r2, #0
 8002342:	da05      	bge.n	8002350 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002348:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800234a:	4620      	mov	r0, r4
 800234c:	f000 fe1a 	bl	8002f84 <sys_dlist_remove>
		update_cache(thread == _current);
 8002350:	4d0b      	ldr	r5, [pc, #44]	; (8002380 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002352:	7b63      	ldrb	r3, [r4, #13]
 8002354:	68a8      	ldr	r0, [r5, #8]
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	7363      	strb	r3, [r4, #13]
 800235c:	1b03      	subs	r3, r0, r4
 800235e:	4258      	negs	r0, r3
 8002360:	4158      	adcs	r0, r3
 8002362:	f7ff fed7 	bl	8002114 <update_cache>
	__asm__ volatile(
 8002366:	f386 8811 	msr	BASEPRI, r6
 800236a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800236e:	68ab      	ldr	r3, [r5, #8]
 8002370:	42a3      	cmp	r3, r4
 8002372:	d103      	bne.n	800237c <z_impl_k_thread_suspend+0x5c>
}
 8002374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002378:	f000 be22 	b.w	8002fc0 <z_reschedule_unlocked>
}
 800237c:	bd70      	pop	{r4, r5, r6, pc}
 800237e:	bf00      	nop
 8002380:	200002d0 	.word	0x200002d0

08002384 <k_sched_unlock>:
{
 8002384:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002386:	f04f 0310 	mov.w	r3, #16
 800238a:	f3ef 8411 	mrs	r4, BASEPRI
 800238e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002392:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <k_sched_unlock+0x34>)
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	7bd3      	ldrb	r3, [r2, #15]
 800239c:	3301      	adds	r3, #1
 800239e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff feb7 	bl	8002114 <update_cache>
	__asm__ volatile(
 80023a6:	f384 8811 	msr	BASEPRI, r4
 80023aa:	f3bf 8f6f 	isb	sy
}
 80023ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80023b2:	f000 be05 	b.w	8002fc0 <z_reschedule_unlocked>
 80023b6:	bf00      	nop
 80023b8:	200002d0 	.word	0x200002d0

080023bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80023be:	2100      	movs	r1, #0
 80023c0:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80023c4:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80023c8:	4608      	mov	r0, r1
 80023ca:	f7ff be55 	b.w	8002078 <k_sched_time_slice_set>
 80023ce:	bf00      	nop
 80023d0:	200002d0 	.word	0x200002d0

080023d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80023d6:	f04f 0310 	mov.w	r3, #16
 80023da:	f3ef 8511 	mrs	r5, BASEPRI
 80023de:	f383 8812 	msr	BASEPRI_MAX, r3
 80023e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80023e6:	491a      	ldr	r1, [pc, #104]	; (8002450 <z_impl_k_yield+0x7c>)
 80023e8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80023ea:	7b43      	ldrb	r3, [r0, #13]
 80023ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80023f2:	f000 fdc7 	bl	8002f84 <sys_dlist_remove>
	}
	queue_thread(_current);
 80023f6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80023f8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 80023fa:	4608      	mov	r0, r1
 80023fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002400:	735a      	strb	r2, [r3, #13]
 8002402:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002406:	4282      	cmp	r2, r0
 8002408:	d01c      	beq.n	8002444 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800240a:	b1da      	cbz	r2, 8002444 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 800240c:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 800240e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8002412:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8002416:	42a6      	cmp	r6, r4
 8002418:	d00f      	beq.n	800243a <z_impl_k_yield+0x66>
		return b2 - b1;
 800241a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800241c:	2c00      	cmp	r4, #0
 800241e:	dd0c      	ble.n	800243a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8002420:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002422:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8002426:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8002428:	6053      	str	r3, [r2, #4]
	update_cache(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fe72 	bl	8002114 <update_cache>
 8002430:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8002432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002436:	f7fe bcad 	b.w	8000d94 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800243a:	42ba      	cmp	r2, r7
 800243c:	d002      	beq.n	8002444 <z_impl_k_yield+0x70>
 800243e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002440:	2a00      	cmp	r2, #0
 8002442:	d1e6      	bne.n	8002412 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8002444:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 8002446:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800244a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800244c:	620b      	str	r3, [r1, #32]
}
 800244e:	e7ec      	b.n	800242a <z_impl_k_yield+0x56>
 8002450:	200002d0 	.word	0x200002d0

08002454 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8002454:	ea50 0301 	orrs.w	r3, r0, r1
{
 8002458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800245c:	4605      	mov	r5, r0
 800245e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002460:	d103      	bne.n	800246a <z_tick_sleep+0x16>
		arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8002462:	f7ff ffb7 	bl	80023d4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8002466:	2000      	movs	r0, #0
 8002468:	e033      	b.n	80024d2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800246a:	f06f 0401 	mvn.w	r4, #1
 800246e:	1a24      	subs	r4, r4, r0
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002474:	eb63 0301 	sbc.w	r3, r3, r1
 8002478:	2c01      	cmp	r4, #1
 800247a:	f173 0300 	sbcs.w	r3, r3, #0
 800247e:	da02      	bge.n	8002486 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002480:	f000 fe10 	bl	80030a4 <sys_clock_tick_get_32>
 8002484:	1944      	adds	r4, r0, r5
 8002486:	f04f 0310 	mov.w	r3, #16
 800248a:	f3ef 8811 	mrs	r8, BASEPRI
 800248e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002492:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8002496:	4f10      	ldr	r7, [pc, #64]	; (80024d8 <z_tick_sleep+0x84>)
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <z_tick_sleep+0x88>)
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800249e:	f7ff ff27 	bl	80022f0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80024a2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <z_tick_sleep+0x8c>)
 80024a6:	462a      	mov	r2, r5
 80024a8:	4633      	mov	r3, r6
 80024aa:	3018      	adds	r0, #24
 80024ac:	f000 f8f0 	bl	8002690 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	7b53      	ldrb	r3, [r2, #13]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	7353      	strb	r3, [r2, #13]
 80024ba:	4640      	mov	r0, r8
 80024bc:	f7fe fc6a 	bl	8000d94 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80024c0:	f000 fdf0 	bl	80030a4 <sys_clock_tick_get_32>
 80024c4:	1a20      	subs	r0, r4, r0
 80024c6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80024ca:	2801      	cmp	r0, #1
 80024cc:	f173 0300 	sbcs.w	r3, r3, #0
 80024d0:	dbc9      	blt.n	8002466 <z_tick_sleep+0x12>
}
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d6:	bf00      	nop
 80024d8:	200002d0 	.word	0x200002d0
 80024dc:	200002f4 	.word	0x200002f4
 80024e0:	08003001 	.word	0x08003001

080024e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80024e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80024e8:	bf08      	it	eq
 80024ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80024ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80024f0:	d106      	bne.n	8002500 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <z_impl_k_sleep+0x2c>)
 80024f4:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 80024f6:	f7ff ff13 	bl	8002320 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80024fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80024fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002500:	f7ff ffa8 	bl	8002454 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002504:	220a      	movs	r2, #10
 8002506:	2300      	movs	r3, #0
 8002508:	17c1      	asrs	r1, r0, #31
 800250a:	f7fd fe43 	bl	8000194 <__aeabi_uldivmod>
	return ret;
 800250e:	e7f6      	b.n	80024fe <z_impl_k_sleep+0x1a>
 8002510:	200002d0 	.word	0x200002d0

08002514 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <z_impl_z_current_get+0x8>)
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	200002d0 	.word	0x200002d0

08002520 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002524:	4604      	mov	r4, r0
 8002526:	f04f 0310 	mov.w	r3, #16
 800252a:	f3ef 8611 	mrs	r6, BASEPRI
 800252e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002532:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002536:	7b43      	ldrb	r3, [r0, #13]
 8002538:	071a      	lsls	r2, r3, #28
 800253a:	d505      	bpl.n	8002548 <z_thread_abort+0x28>
	__asm__ volatile(
 800253c:	f386 8811 	msr	BASEPRI, r6
 8002540:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002548:	f023 0220 	bic.w	r2, r3, #32
 800254c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8002550:	09d2      	lsrs	r2, r2, #7
 8002552:	d120      	bne.n	8002596 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002554:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002556:	68a3      	ldr	r3, [r4, #8]
 8002558:	b113      	cbz	r3, 8002560 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800255a:	4620      	mov	r0, r4
 800255c:	f000 fd1a 	bl	8002f94 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8002560:	f104 0018 	add.w	r0, r4, #24
 8002564:	f000 fd6e 	bl	8003044 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002568:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800256c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8002570:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002572:	42bd      	cmp	r5, r7
 8002574:	d000      	beq.n	8002578 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002576:	b9b5      	cbnz	r5, 80025a6 <z_thread_abort+0x86>
		update_cache(1);
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff fdcb 	bl	8002114 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <z_thread_abort+0xa0>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	42a3      	cmp	r3, r4
 8002584:	d1da      	bne.n	800253c <z_thread_abort+0x1c>
 8002586:	f3ef 8305 	mrs	r3, IPSR
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1d6      	bne.n	800253c <z_thread_abort+0x1c>
 800258e:	4630      	mov	r0, r6
 8002590:	f7fe fc00 	bl	8000d94 <arch_swap>
	return ret;
 8002594:	e7d2      	b.n	800253c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002596:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80025a0:	f000 fcf0 	bl	8002f84 <sys_dlist_remove>
}
 80025a4:	e7d7      	b.n	8002556 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 80025a6:	4628      	mov	r0, r5
 80025a8:	f000 fcf4 	bl	8002f94 <unpend_thread_no_timeout>
 80025ac:	f105 0018 	add.w	r0, r5, #24
 80025b0:	f000 fd48 	bl	8003044 <z_abort_timeout>
 80025b4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80025b8:	4628      	mov	r0, r5
 80025ba:	f7ff fe45 	bl	8002248 <ready_thread>
 80025be:	e7d7      	b.n	8002570 <z_thread_abort+0x50>
 80025c0:	200002d0 	.word	0x200002d0

080025c4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80025c4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
 80025c6:	4806      	ldr	r0, [pc, #24]	; (80025e0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <z_data_copy+0x20>)
 80025ca:	4907      	ldr	r1, [pc, #28]	; (80025e8 <z_data_copy+0x24>)
 80025cc:	1a12      	subs	r2, r2, r0
 80025ce:	f000 f9ff 	bl	80029d0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80025d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <z_data_copy+0x28>)
 80025d8:	4905      	ldr	r1, [pc, #20]	; (80025f0 <z_data_copy+0x2c>)
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <z_data_copy+0x30>)
 80025dc:	f000 b9f8 	b.w	80029d0 <memcpy>
 80025e0:	20000000 	.word	0x20000000
 80025e4:	2000006c 	.word	0x2000006c
 80025e8:	08003828 	.word	0x08003828
 80025ec:	00000000 	.word	0x00000000
 80025f0:	08003828 	.word	0x08003828
 80025f4:	20000000 	.word	0x20000000

080025f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <elapsed+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b90b      	cbnz	r3, 8002602 <elapsed+0xa>
 80025fe:	f7ff ba5d 	b.w	8001abc <sys_clock_elapsed>
}
 8002602:	2000      	movs	r0, #0
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000300 	.word	0x20000300

0800260c <next_timeout>:
	return list->head == list;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 800260e:	b510      	push	{r4, lr}
 8002610:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002612:	429c      	cmp	r4, r3
 8002614:	bf08      	it	eq
 8002616:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002618:	f7ff ffee 	bl	80025f8 <elapsed>
 800261c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 800261e:	b16c      	cbz	r4, 800263c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002620:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8002624:	1ac0      	subs	r0, r0, r3
 8002626:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800262a:	2801      	cmp	r0, #1
 800262c:	f173 0200 	sbcs.w	r2, r3, #0
 8002630:	db0d      	blt.n	800264e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002632:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8002636:	f173 0300 	sbcs.w	r3, r3, #0
 800263a:	db01      	blt.n	8002640 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 800263c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <next_timeout+0x4c>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b113      	cbz	r3, 800264c <next_timeout+0x40>
 8002646:	4298      	cmp	r0, r3
 8002648:	bfa8      	it	ge
 800264a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800264c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 800264e:	2000      	movs	r0, #0
 8002650:	e7f6      	b.n	8002640 <next_timeout+0x34>
 8002652:	bf00      	nop
 8002654:	20000034 	.word	0x20000034
 8002658:	200002d0 	.word	0x200002d0

0800265c <remove_timeout>:
{
 800265c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 800265e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002660:	b168      	cbz	r0, 800267e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <remove_timeout+0x30>)
 8002664:	6852      	ldr	r2, [r2, #4]
 8002666:	4290      	cmp	r0, r2
 8002668:	d009      	beq.n	800267e <remove_timeout+0x22>
	if (next(t) != NULL) {
 800266a:	b143      	cbz	r3, 800267e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800266c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002670:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002674:	1912      	adds	r2, r2, r4
 8002676:	eb41 0105 	adc.w	r1, r1, r5
 800267a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800267e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8002680:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002682:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002684:	2300      	movs	r3, #0
	node->prev = NULL;
 8002686:	e9c0 3300 	strd	r3, r3, [r0]
}
 800268a:	bd30      	pop	{r4, r5, pc}
 800268c:	20000034 	.word	0x20000034

08002690 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	bf08      	it	eq
 8002696:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800269a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269c:	4604      	mov	r4, r0
 800269e:	461f      	mov	r7, r3
 80026a0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80026a2:	d067      	beq.n	8002774 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80026a4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80026a6:	f04f 0310 	mov.w	r3, #16
 80026aa:	f3ef 8611 	mrs	r6, BASEPRI
 80026ae:	f383 8812 	msr	BASEPRI_MAX, r3
 80026b2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80026b6:	f06f 0201 	mvn.w	r2, #1
 80026ba:	1b53      	subs	r3, r2, r5
 80026bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80026c0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db1b      	blt.n	8002700 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <z_add_timeout+0xe8>)
 80026ca:	e9d3 1300 	ldrd	r1, r3, [r3]
 80026ce:	1a52      	subs	r2, r2, r1
 80026d0:	eb6c 0303 	sbc.w	r3, ip, r3
 80026d4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 80026d6:	eb63 0307 	sbc.w	r3, r3, r7
 80026da:	2d01      	cmp	r5, #1
 80026dc:	f173 0200 	sbcs.w	r2, r3, #0
 80026e0:	bfbc      	itt	lt
 80026e2:	2501      	movlt	r5, #1
 80026e4:	2300      	movlt	r3, #0
 80026e6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 80026ea:	4824      	ldr	r0, [pc, #144]	; (800277c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 80026ec:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80026f0:	4283      	cmp	r3, r0
 80026f2:	d118      	bne.n	8002726 <z_add_timeout+0x96>
	node->prev = tail;
 80026f4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 80026f8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 80026fc:	6044      	str	r4, [r0, #4]
}
 80026fe:	e026      	b.n	800274e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8002700:	f7ff ff7a 	bl	80025f8 <elapsed>
 8002704:	3501      	adds	r5, #1
 8002706:	f147 0700 	adc.w	r7, r7, #0
 800270a:	182d      	adds	r5, r5, r0
 800270c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8002710:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8002714:	e7e9      	b.n	80026ea <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8002716:	1a52      	subs	r2, r2, r1
 8002718:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 800271c:	459c      	cmp	ip, r3
 800271e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8002722:	d0e7      	beq.n	80026f4 <z_add_timeout+0x64>
 8002724:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0e4      	beq.n	80026f4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 800272a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 800272e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8002732:	428a      	cmp	r2, r1
 8002734:	eb75 0e07 	sbcs.w	lr, r5, r7
 8002738:	daed      	bge.n	8002716 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 800273a:	1a8a      	subs	r2, r1, r2
 800273c:	eb67 0505 	sbc.w	r5, r7, r5
 8002740:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8002744:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002746:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800274a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800274c:	605c      	str	r4, [r3, #4]
	return list->head == list;
 800274e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002750:	4283      	cmp	r3, r0
 8002752:	d00b      	beq.n	800276c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002754:	429c      	cmp	r4, r3
 8002756:	d109      	bne.n	800276c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8002758:	f7ff ff58 	bl	800260c <next_timeout>

			if (next_time == 0 ||
 800275c:	b118      	cbz	r0, 8002766 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	4283      	cmp	r3, r0
 8002764:	d002      	beq.n	800276c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8002766:	2100      	movs	r1, #0
 8002768:	f7ff f938 	bl	80019dc <sys_clock_set_timeout>
	__asm__ volatile(
 800276c:	f386 8811 	msr	BASEPRI, r6
 8002770:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8002774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002776:	bf00      	nop
 8002778:	20000170 	.word	0x20000170
 800277c:	20000034 	.word	0x20000034
 8002780:	200002d0 	.word	0x200002d0

08002784 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8002784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002788:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800278a:	f7ff fd1d 	bl	80021c8 <z_time_slice>
	__asm__ volatile(
 800278e:	f04f 0310 	mov.w	r3, #16
 8002792:	f3ef 8411 	mrs	r4, BASEPRI
 8002796:	f383 8812 	msr	BASEPRI_MAX, r3
 800279a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800279e:	4e24      	ldr	r6, [pc, #144]	; (8002830 <sys_clock_announce+0xac>)
	return list->head == list;
 80027a0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002834 <sys_clock_announce+0xb0>
 80027a4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80027a6:	4d24      	ldr	r5, [pc, #144]	; (8002838 <sys_clock_announce+0xb4>)
 80027a8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80027ac:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027ae:	4540      	cmp	r0, r8
		curr_tick += dt;
 80027b0:	e9d5 1e00 	ldrd	r1, lr, [r5]
 80027b4:	ea4f 77e2 	mov.w	r7, r2, asr #31
 80027b8:	d00b      	beq.n	80027d2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80027ba:	b150      	cbz	r0, 80027d2 <sys_clock_announce+0x4e>
 80027bc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	eb77 090c 	sbcs.w	r9, r7, ip
 80027c6:	da16      	bge.n	80027f6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80027ce:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80027d2:	1852      	adds	r2, r2, r1
 80027d4:	eb4e 0707 	adc.w	r7, lr, r7
 80027d8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 80027dc:	2500      	movs	r5, #0
 80027de:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80027e0:	f7ff ff14 	bl	800260c <next_timeout>
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7ff f8f9 	bl	80019dc <sys_clock_set_timeout>
	__asm__ volatile(
 80027ea:	f384 8811 	msr	BASEPRI, r4
 80027ee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80027f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 80027f6:	1859      	adds	r1, r3, r1
 80027f8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8002800:	2200      	movs	r2, #0
 8002802:	2300      	movs	r3, #0
 8002804:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8002808:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 800280c:	f7ff ff26 	bl	800265c <remove_timeout>
 8002810:	f384 8811 	msr	BASEPRI, r4
 8002814:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002818:	6883      	ldr	r3, [r0, #8]
 800281a:	4798      	blx	r3
	__asm__ volatile(
 800281c:	f04f 0310 	mov.w	r3, #16
 8002820:	f3ef 8411 	mrs	r4, BASEPRI
 8002824:	f383 8812 	msr	BASEPRI_MAX, r3
 8002828:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800282c:	e7bc      	b.n	80027a8 <sys_clock_announce+0x24>
 800282e:	bf00      	nop
 8002830:	20000300 	.word	0x20000300
 8002834:	20000034 	.word	0x20000034
 8002838:	20000170 	.word	0x20000170

0800283c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800283c:	b510      	push	{r4, lr}
 800283e:	f04f 0310 	mov.w	r3, #16
 8002842:	f3ef 8411 	mrs	r4, BASEPRI
 8002846:	f383 8812 	msr	BASEPRI_MAX, r3
 800284a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 800284e:	f7ff f935 	bl	8001abc <sys_clock_elapsed>
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <sys_clock_tick_get+0x2c>)
 8002854:	e9d2 3100 	ldrd	r3, r1, [r2]
 8002858:	18c0      	adds	r0, r0, r3
 800285a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800285e:	f384 8811 	msr	BASEPRI, r4
 8002862:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002866:	bd10      	pop	{r4, pc}
 8002868:	20000170 	.word	0x20000170

0800286c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800286c:	4a02      	ldr	r2, [pc, #8]	; (8002878 <boot_banner+0xc>)
 800286e:	4903      	ldr	r1, [pc, #12]	; (800287c <boot_banner+0x10>)
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <boot_banner+0x14>)
 8002872:	f000 b80a 	b.w	800288a <printk>
 8002876:	bf00      	nop
 8002878:	08003825 	.word	0x08003825
 800287c:	080037e4 	.word	0x080037e4
 8002880:	080037ff 	.word	0x080037ff

08002884 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002884:	4770      	bx	lr

08002886 <arch_printk_char_out>:
}
 8002886:	2000      	movs	r0, #0
 8002888:	4770      	bx	lr

0800288a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 800288a:	b40f      	push	{r0, r1, r2, r3}
 800288c:	b507      	push	{r0, r1, r2, lr}
 800288e:	a904      	add	r1, sp, #16
 8002890:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002894:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8002896:	f7fd fe29 	bl	80004ec <vprintk>
	}
	va_end(ap);
}
 800289a:	b003      	add	sp, #12
 800289c:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a0:	b004      	add	sp, #16
 80028a2:	4770      	bx	lr

080028a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80028a4:	4604      	mov	r4, r0
 80028a6:	b508      	push	{r3, lr}
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80028ac:	461a      	mov	r2, r3
 80028ae:	47a0      	blx	r4
	return z_impl_z_current_get();
 80028b0:	f7ff fe30 	bl	8002514 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80028b4:	f7fe fc48 	bl	8001148 <z_impl_k_thread_abort>

080028b8 <encode_uint>:
{
 80028b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028bc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80028be:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80028c0:	2b6f      	cmp	r3, #111	; 0x6f
{
 80028c2:	4680      	mov	r8, r0
 80028c4:	460f      	mov	r7, r1
 80028c6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80028c8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80028cc:	d029      	beq.n	8002922 <encode_uint+0x6a>
 80028ce:	d824      	bhi.n	800291a <encode_uint+0x62>
		return 16;
 80028d0:	2b58      	cmp	r3, #88	; 0x58
 80028d2:	bf14      	ite	ne
 80028d4:	260a      	movne	r6, #10
 80028d6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 80028d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80028dc:	4632      	mov	r2, r6
 80028de:	2300      	movs	r3, #0
 80028e0:	4640      	mov	r0, r8
 80028e2:	4639      	mov	r1, r7
 80028e4:	f7fd fc56 	bl	8000194 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028e8:	2a09      	cmp	r2, #9
 80028ea:	b2d4      	uxtb	r4, r2
 80028ec:	d81e      	bhi.n	800292c <encode_uint+0x74>
 80028ee:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80028f0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028f2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80028f4:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028f8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80028fc:	d301      	bcc.n	8002902 <encode_uint+0x4a>
 80028fe:	45d1      	cmp	r9, sl
 8002900:	d811      	bhi.n	8002926 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002902:	782b      	ldrb	r3, [r5, #0]
 8002904:	069b      	lsls	r3, r3, #26
 8002906:	d505      	bpl.n	8002914 <encode_uint+0x5c>
		if (radix == 8) {
 8002908:	2e08      	cmp	r6, #8
 800290a:	d115      	bne.n	8002938 <encode_uint+0x80>
			conv->altform_0 = true;
 800290c:	78ab      	ldrb	r3, [r5, #2]
 800290e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002912:	70ab      	strb	r3, [r5, #2]
}
 8002914:	4648      	mov	r0, r9
 8002916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 800291a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800291e:	2b70      	cmp	r3, #112	; 0x70
 8002920:	e7d7      	b.n	80028d2 <encode_uint+0x1a>
	switch (specifier) {
 8002922:	2608      	movs	r6, #8
 8002924:	e7d8      	b.n	80028d8 <encode_uint+0x20>
		value /= radix;
 8002926:	4680      	mov	r8, r0
 8002928:	460f      	mov	r7, r1
 800292a:	e7d7      	b.n	80028dc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800292c:	f1bb 0f19 	cmp.w	fp, #25
 8002930:	bf94      	ite	ls
 8002932:	3437      	addls	r4, #55	; 0x37
 8002934:	3457      	addhi	r4, #87	; 0x57
 8002936:	e7db      	b.n	80028f0 <encode_uint+0x38>
		} else if (radix == 16) {
 8002938:	2e10      	cmp	r6, #16
 800293a:	d1eb      	bne.n	8002914 <encode_uint+0x5c>
			conv->altform_0c = true;
 800293c:	78ab      	ldrb	r3, [r5, #2]
 800293e:	f043 0310 	orr.w	r3, r3, #16
 8002942:	e7e6      	b.n	8002912 <encode_uint+0x5a>

08002944 <outs>:
{
 8002944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002948:	4607      	mov	r7, r0
 800294a:	4688      	mov	r8, r1
 800294c:	4615      	mov	r5, r2
 800294e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002950:	4614      	mov	r4, r2
 8002952:	42b4      	cmp	r4, r6
 8002954:	eba4 0005 	sub.w	r0, r4, r5
 8002958:	d302      	bcc.n	8002960 <outs+0x1c>
 800295a:	b93e      	cbnz	r6, 800296c <outs+0x28>
 800295c:	7823      	ldrb	r3, [r4, #0]
 800295e:	b12b      	cbz	r3, 800296c <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002960:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002964:	4641      	mov	r1, r8
 8002966:	47b8      	blx	r7
		if (rc < 0) {
 8002968:	2800      	cmp	r0, #0
 800296a:	daf2      	bge.n	8002952 <outs+0xe>
}
 800296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002970 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002970:	4770      	bx	lr

08002972 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002972:	2000      	movs	r0, #0
 8002974:	4770      	bx	lr

08002976 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002976:	f000 bade 	b.w	8002f36 <z_fatal_error>

0800297a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800297a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 800297c:	6800      	ldr	r0, [r0, #0]
 800297e:	f000 bada 	b.w	8002f36 <z_fatal_error>

08002982 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002982:	2100      	movs	r1, #0
 8002984:	2001      	movs	r0, #1
 8002986:	f7ff bff6 	b.w	8002976 <z_arm_fatal_error>

0800298a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800298a:	b508      	push	{r3, lr}
	handler();
 800298c:	f7fe f9da 	bl	8000d44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002994:	f7fe baae 	b.w	8000ef4 <z_arm_exc_exit>

08002998 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002998:	4603      	mov	r3, r0
	size_t n = 0;
 800299a:	2000      	movs	r0, #0

	while (*s != '\0') {
 800299c:	5c1a      	ldrb	r2, [r3, r0]
 800299e:	b902      	cbnz	r2, 80029a2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 80029a0:	4770      	bx	lr
		n++;
 80029a2:	3001      	adds	r0, #1
 80029a4:	e7fa      	b.n	800299c <strlen+0x4>

080029a6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 80029a6:	4603      	mov	r3, r0
	size_t n = 0;
 80029a8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 80029aa:	5c1a      	ldrb	r2, [r3, r0]
 80029ac:	b10a      	cbz	r2, 80029b2 <strnlen+0xc>
 80029ae:	4288      	cmp	r0, r1
 80029b0:	d100      	bne.n	80029b4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 80029b2:	4770      	bx	lr
		n++;
 80029b4:	3001      	adds	r0, #1
 80029b6:	e7f8      	b.n	80029aa <strnlen+0x4>

080029b8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 80029b8:	1e43      	subs	r3, r0, #1
 80029ba:	3901      	subs	r1, #1
 80029bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80029c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80029c4:	4282      	cmp	r2, r0
 80029c6:	d101      	bne.n	80029cc <strcmp+0x14>
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	d1f7      	bne.n	80029bc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 80029cc:	1a10      	subs	r0, r2, r0
 80029ce:	4770      	bx	lr

080029d0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 80029d0:	b510      	push	{r4, lr}
 80029d2:	1e43      	subs	r3, r0, #1
 80029d4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 80029d6:	4291      	cmp	r1, r2
 80029d8:	d100      	bne.n	80029dc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 80029da:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 80029dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 80029e4:	e7f7      	b.n	80029d6 <memcpy+0x6>

080029e6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80029e6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 80029e8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 80029ea:	4603      	mov	r3, r0
	while (n > 0) {
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80029f0:	4770      	bx	lr
		*(d_byte++) = c_byte;
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80029f6:	e7f9      	b.n	80029ec <memset+0x6>

080029f8 <_stdout_hook_default>:
}
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fc:	4770      	bx	lr

080029fe <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80029fe:	2200      	movs	r2, #0
{
 8002a00:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002a02:	4611      	mov	r1, r2
 8002a04:	2006      	movs	r0, #6
 8002a06:	f7fe f985 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	2007      	movs	r0, #7
 8002a10:	f7fe f980 	bl	8000d14 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002a14:	2200      	movs	r2, #0
 8002a16:	4611      	mov	r1, r2
 8002a18:	2008      	movs	r0, #8
 8002a1a:	f7fe f97b 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4611      	mov	r1, r2
 8002a22:	2009      	movs	r0, #9
 8002a24:	f7fe f976 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f7fe f971 	bl	8000d14 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002a32:	2200      	movs	r2, #0
 8002a34:	4611      	mov	r1, r2
 8002a36:	2017      	movs	r0, #23
 8002a38:	f7fe f96c 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4611      	mov	r1, r2
 8002a40:	2028      	movs	r0, #40	; 0x28
 8002a42:	f7fe f967 	bl	8000d14 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002a46:	2200      	movs	r2, #0
 8002a48:	4611      	mov	r1, r2
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7fe f962 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002a50:	2200      	movs	r2, #0
 8002a52:	4611      	mov	r1, r2
 8002a54:	202a      	movs	r0, #42	; 0x2a
 8002a56:	f7fe f95d 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7fe f958 	bl	8000d14 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002a64:	2200      	movs	r2, #0
 8002a66:	4611      	mov	r1, r2
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f7fe f953 	bl	8000d14 <z_arm_irq_priority_set>
}
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bd08      	pop	{r3, pc}

08002a72 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8002a72:	6902      	ldr	r2, [r0, #16]
 8002a74:	2117      	movs	r1, #23
 8002a76:	2016      	movs	r0, #22
 8002a78:	f7fe bc44 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002a7c <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8002a7c:	6902      	ldr	r2, [r0, #16]
 8002a7e:	2116      	movs	r1, #22
 8002a80:	2015      	movs	r0, #21
 8002a82:	f7fe bc3f 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002a86 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8002a86:	6902      	ldr	r2, [r0, #16]
 8002a88:	2113      	movs	r1, #19
 8002a8a:	2012      	movs	r0, #18
 8002a8c:	f7fe bc3a 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002a90 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8002a90:	6902      	ldr	r2, [r0, #16]
 8002a92:	2111      	movs	r1, #17
 8002a94:	2010      	movs	r0, #16
 8002a96:	f7fe bc35 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002a9a <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8002a9a:	6902      	ldr	r2, [r0, #16]
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	200a      	movs	r0, #10
 8002aa0:	f7fe bc30 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002aa4 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8002aa4:	6902      	ldr	r2, [r0, #16]
 8002aa6:	210a      	movs	r1, #10
 8002aa8:	2005      	movs	r0, #5
 8002aaa:	f7fe bc2b 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002aae <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8002aae:	6902      	ldr	r2, [r0, #16]
 8002ab0:	2105      	movs	r1, #5
 8002ab2:	2004      	movs	r0, #4
 8002ab4:	f7fe bc26 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002ab8 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8002ab8:	6902      	ldr	r2, [r0, #16]
 8002aba:	2104      	movs	r1, #4
 8002abc:	2003      	movs	r0, #3
 8002abe:	f7fe bc21 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002ac2 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8002ac2:	6902      	ldr	r2, [r0, #16]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fe bc1c 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002acc <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8002acc:	6902      	ldr	r2, [r0, #16]
 8002ace:	2102      	movs	r1, #2
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f7fe bc17 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002ad6 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8002ad6:	6902      	ldr	r2, [r0, #16]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe bc12 	b.w	8001304 <__stm32_exti_isr.isra.0>

08002ae0 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8002ae0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8002aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aee:	6083      	str	r3, [r0, #8]
}
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8002af2:	4770      	bx	lr

08002af4 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002af4:	6843      	ldr	r3, [r0, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002af8:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002afa:	600b      	str	r3, [r1, #0]
}
 8002afc:	2000      	movs	r0, #0
 8002afe:	4770      	bx	lr

08002b00 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002b00:	6843      	ldr	r3, [r0, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002b04:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002b06:	4042      	eors	r2, r0
 8002b08:	400a      	ands	r2, r1
 8002b0a:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002b0c:	615a      	str	r2, [r3, #20]
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	4770      	bx	lr

08002b12 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002b12:	6843      	ldr	r3, [r0, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
}
 8002b16:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002b18:	6199      	str	r1, [r3, #24]
}
 8002b1a:	4770      	bx	lr

08002b1c <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002b1c:	6843      	ldr	r3, [r0, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002b20:	0409      	lsls	r1, r1, #16
 8002b22:	6199      	str	r1, [r3, #24]
}
 8002b24:	2000      	movs	r0, #0
 8002b26:	4770      	bx	lr

08002b28 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002b28:	6843      	ldr	r3, [r0, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002b2c:	6953      	ldr	r3, [r2, #20]
 8002b2e:	404b      	eors	r3, r1
 8002b30:	6153      	str	r3, [r2, #20]
}
 8002b32:	2000      	movs	r0, #0
 8002b34:	4770      	bx	lr

08002b36 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8002b36:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002b38:	6898      	ldr	r0, [r3, #8]
{
 8002b3a:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002b3c:	b158      	cbz	r0, 8002b56 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002b3e:	2400      	movs	r4, #0
 8002b40:	4281      	cmp	r1, r0
 8002b42:	d112      	bne.n	8002b6a <gpio_stm32_manage_callback+0x34>
	return node->next;
 8002b44:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8002b46:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8002b48:	b954      	cbnz	r4, 8002b60 <gpio_stm32_manage_callback+0x2a>
 8002b4a:	428d      	cmp	r5, r1
	list->head = node;
 8002b4c:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002b4e:	d100      	bne.n	8002b52 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002b50:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002b52:	2000      	movs	r0, #0
 8002b54:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8002b56:	b96a      	cbnz	r2, 8002b74 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002b58:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8002b5a:	bd30      	pop	{r4, r5, pc}
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	e7ef      	b.n	8002b40 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8002b60:	428d      	cmp	r5, r1
	parent->next = child;
 8002b62:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002b64:	bf08      	it	eq
 8002b66:	60dc      	streq	r4, [r3, #12]
}
 8002b68:	e7f3      	b.n	8002b52 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8002b6a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d1f4      	bne.n	8002b5c <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002b72:	b13a      	cbz	r2, 8002b84 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8002b74:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	600a      	str	r2, [r1, #0]
	list->head = node;
 8002b7a:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1eb      	bne.n	8002b58 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002b80:	60d9      	str	r1, [r3, #12]
}
 8002b82:	e7ea      	b.n	8002b5a <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002b84:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002b88:	e7e7      	b.n	8002b5a <gpio_stm32_manage_callback+0x24>

08002b8a <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002b8a:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8002b8c:	6903      	ldr	r3, [r0, #16]
 8002b8e:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 8002b90:	6840      	ldr	r0, [r0, #4]
		ret = clock_control_on(clk,
 8002b92:	300c      	adds	r0, #12
 8002b94:	f7fe fd36 	bl	8001604 <clock_control_on.constprop.0>

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8002b98:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8002b9c:	bd08      	pop	{r3, pc}

08002b9e <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002ba0:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002ba2:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ba4:	6867      	ldr	r7, [r4, #4]
 8002ba6:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002ba8:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002bac:	ea27 0700 	bic.w	r7, r7, r0
 8002bb0:	408e      	lsls	r6, r1
 8002bb2:	433e      	orrs	r6, r7
 8002bb4:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002bba:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002bbe:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002bc2:	f04f 0e03 	mov.w	lr, #3
 8002bc6:	007f      	lsls	r7, r7, #1
 8002bc8:	fa0e f707 	lsl.w	r7, lr, r7
 8002bcc:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002bd4:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002bd8:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8002bdc:	007f      	lsls	r7, r7, #1
 8002bde:	40be      	lsls	r6, r7
 8002be0:	ea46 060c 	orr.w	r6, r6, ip
 8002be4:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002bea:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002bee:	68e7      	ldr	r7, [r4, #12]
 8002bf0:	0076      	lsls	r6, r6, #1
 8002bf2:	fa0e f606 	lsl.w	r6, lr, r6
 8002bf6:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002bfe:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002c02:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002c06:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002c08:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002c0c:	40b2      	lsls	r2, r6
 8002c0e:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002c10:	2d20      	cmp	r5, #32
 8002c12:	60e2      	str	r2, [r4, #12]
 8002c14:	d115      	bne.n	8002c42 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8002c16:	2907      	cmp	r1, #7
 8002c18:	dc2b      	bgt.n	8002c72 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002c1e:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8002c20:	b32a      	cbz	r2, 8002c6e <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8002c22:	fab2 f282 	clz	r2, r2
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	260f      	movs	r6, #15
 8002c2a:	fa06 f202 	lsl.w	r2, r6, r2
 8002c2e:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8002c36:	fab2 f282 	clz	r2, r2
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002c46:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c4a:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	fa90 f0a0 	rbit	r0, r0
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002c54:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002c58:	092d      	lsrs	r5, r5, #4
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	0040      	lsls	r0, r0, #1
 8002c60:	ea22 0303 	bic.w	r3, r2, r3
 8002c64:	fa05 f000 	lsl.w	r0, r5, r0
 8002c68:	4318      	orrs	r0, r3
 8002c6a:	6020      	str	r0, [r4, #0]
}
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002c6e:	462a      	mov	r2, r5
 8002c70:	e7d9      	b.n	8002c26 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002c72:	0a02      	lsrs	r2, r0, #8
 8002c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8002c7a:	b181      	cbz	r1, 8002c9e <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 8002c7c:	fab1 f181 	clz	r1, r1
 8002c80:	0089      	lsls	r1, r1, #2
 8002c82:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	fa07 f101 	lsl.w	r1, r7, r1
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	ea26 0101 	bic.w	r1, r6, r1
 8002c96:	4093      	lsls	r3, r2
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002c9c:	e7d1      	b.n	8002c42 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	e7ee      	b.n	8002c80 <gpio_stm32_configure_raw.isra.0+0xe2>

08002ca2 <gpio_stm32_config>:
{
 8002ca2:	b538      	push	{r3, r4, r5, lr}
 8002ca4:	460d      	mov	r5, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8002ca6:	0591      	lsls	r1, r2, #22
{
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002cac:	d519      	bpl.n	8002ce2 <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002cae:	079a      	lsls	r2, r3, #30
 8002cb0:	d510      	bpl.n	8002cd4 <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002cb2:	0758      	lsls	r0, r3, #29
 8002cb4:	d530      	bpl.n	8002d18 <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002cb6:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002cb8:	06d9      	lsls	r1, r3, #27
 8002cba:	d50d      	bpl.n	8002cd8 <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002cc0:	0519      	lsls	r1, r3, #20
 8002cc2:	d41e      	bmi.n	8002d02 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002cc4:	0558      	lsls	r0, r3, #21
 8002cc6:	d515      	bpl.n	8002cf4 <gpio_stm32_config+0x52>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002cc8:	2101      	movs	r1, #1
 8002cca:	40a9      	lsls	r1, r5
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff ff25 	bl	8002b1c <gpio_stm32_port_clear_bits_raw>
 8002cd2:	e00f      	b.n	8002cf4 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	e7ef      	b.n	8002cb8 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002cd8:	0698      	lsls	r0, r3, #26
 8002cda:	d5f1      	bpl.n	8002cc0 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002ce0:	e7ee      	b.n	8002cc0 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002ce2:	05d1      	lsls	r1, r2, #23
 8002ce4:	d513      	bpl.n	8002d0e <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002ce6:	06da      	lsls	r2, r3, #27
 8002ce8:	d413      	bmi.n	8002d12 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002cea:	f013 0220 	ands.w	r2, r3, #32
 8002cee:	bf18      	it	ne
 8002cf0:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002cf4:	6860      	ldr	r0, [r4, #4]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f7ff ff50 	bl	8002b9e <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002cfe:	2000      	movs	r0, #0
}
 8002d00:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d02:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002d04:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d06:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002d08:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8002d0a:	618b      	str	r3, [r1, #24]
	return 0;
 8002d0c:	e7f2      	b.n	8002cf4 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002d0e:	2230      	movs	r2, #48	; 0x30
 8002d10:	e7f0      	b.n	8002cf4 <gpio_stm32_config+0x52>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d16:	e7ed      	b.n	8002cf4 <gpio_stm32_config+0x52>
				return -ENOTSUP;
 8002d18:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002d1c:	e7f0      	b.n	8002d00 <gpio_stm32_config+0x5e>

08002d1e <gpio_stm32_isr>:
{
 8002d1e:	460b      	mov	r3, r1
 8002d20:	6889      	ldr	r1, [r1, #8]
 8002d22:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002d24:	b169      	cbz	r1, 8002d42 <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002d26:	2501      	movs	r5, #1
 8002d28:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002d2a:	680c      	ldr	r4, [r1, #0]
 8002d2c:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002d2e:	688a      	ldr	r2, [r1, #8]
 8002d30:	402a      	ands	r2, r5
 8002d32:	d002      	beq.n	8002d3a <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002d34:	684b      	ldr	r3, [r1, #4]
 8002d36:	4630      	mov	r0, r6
 8002d38:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002d3a:	b114      	cbz	r4, 8002d42 <gpio_stm32_isr+0x24>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	6824      	ldr	r4, [r4, #0]
 8002d40:	e7f5      	b.n	8002d2e <gpio_stm32_isr+0x10>
}
 8002d42:	bd70      	pop	{r4, r5, r6, pc}

08002d44 <gpio_stm32_configure>:
{
 8002d44:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8002d46:	6840      	ldr	r0, [r0, #4]
 8002d48:	f7ff ff29 	bl	8002b9e <gpio_stm32_configure_raw.isra.0>
}
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	bd08      	pop	{r3, pc}

08002d50 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002d50:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002d52:	6803      	ldr	r3, [r0, #0]
 8002d54:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002d56:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8002d58:	6843      	ldr	r3, [r0, #4]
 8002d5a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002d5c:	9b01      	ldr	r3, [sp, #4]
}
 8002d5e:	b002      	add	sp, #8
 8002d60:	4770      	bx	lr

08002d62 <uart_stm32_poll_in>:
{
 8002d62:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002d64:	6843      	ldr	r3, [r0, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002d68:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002d6a:	071a      	lsls	r2, r3, #28
 8002d6c:	d501      	bpl.n	8002d72 <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002d6e:	f7ff ffef 	bl	8002d50 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002d72:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8002d74:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002d76:	bf43      	ittte	mi
 8002d78:	6843      	ldrmi	r3, [r0, #4]
 8002d7a:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002d7c:	2000      	movmi	r0, #0
		return -1;
 8002d7e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002d82:	bd08      	pop	{r3, pc}

08002d84 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002d84:	6843      	ldr	r3, [r0, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d88:	681a      	ldr	r2, [r3, #0]
		if (LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8002d8a:	0612      	lsls	r2, r2, #24
 8002d8c:	d5fc      	bpl.n	8002d88 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8002d8e:	f04f 0010 	mov.w	r0, #16
 8002d92:	f3ef 8211 	mrs	r2, BASEPRI
 8002d96:	f380 8812 	msr	BASEPRI_MAX, r0
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	6818      	ldr	r0, [r3, #0]
			if (LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8002da0:	0600      	lsls	r0, r0, #24
 8002da2:	d404      	bmi.n	8002dae <uart_stm32_poll_out+0x2a>
	__asm__ volatile(
 8002da4:	f382 8811 	msr	BASEPRI, r2
 8002da8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002dac:	e7ec      	b.n	8002d88 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002dae:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
 8002db0:	f382 8811 	msr	BASEPRI, r2
 8002db4:	f3bf 8f6f 	isb	sy
}
 8002db8:	4770      	bx	lr

08002dba <uart_stm32_err_check>:
{
 8002dba:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002dbc:	6843      	ldr	r3, [r0, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002dc0:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002dc2:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8002dc4:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002dc6:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002dc8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8002dcc:	bf48      	it	mi
 8002dce:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8002dd2:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8002dd4:	bf48      	it	mi
 8002dd6:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8002dda:	07d3      	lsls	r3, r2, #31
 8002ddc:	d501      	bpl.n	8002de2 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002dde:	f7ff ffb7 	bl	8002d50 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8002de2:	0791      	lsls	r1, r2, #30
 8002de4:	d501      	bpl.n	8002dea <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8002de6:	f7ff ffb3 	bl	8002d50 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8002dea:	0753      	lsls	r3, r2, #29
 8002dec:	d501      	bpl.n	8002df2 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8002dee:	f7ff ffaf 	bl	8002d50 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8002df2:	f7ff ffad 	bl	8002d50 <LL_USART_ClearFlag_FE>
}
 8002df6:	4610      	mov	r0, r2
 8002df8:	bd08      	pop	{r3, pc}

08002dfa <uart_stm32_set_baudrate>:
{
 8002dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8002dfc:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002dfe:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8002e00:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002e02:	f857 4b08 	ldr.w	r4, [r7], #8
{
 8002e06:	460d      	mov	r5, r1
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f000 f87e 	bl	8002f0a <z_device_ready>
 8002e0e:	b308      	cbz	r0, 8002e54 <uart_stm32_set_baudrate+0x5a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002e10:	68b3      	ldr	r3, [r6, #8]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	b1f3      	cbz	r3, 8002e54 <uart_stm32_set_baudrate+0x5a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002e16:	aa01      	add	r2, sp, #4
 8002e18:	4639      	mov	r1, r7
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	db18      	blt.n	8002e54 <uart_stm32_set_baudrate+0x5a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002e22:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e24:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e2a:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002e2c:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e2e:	00aa      	lsls	r2, r5, #2
 8002e30:	0fab      	lsrs	r3, r5, #30
 8002e32:	fba0 0101 	umull	r0, r1, r0, r1
 8002e36:	f7fd f9ad 	bl	8000194 <__aeabi_uldivmod>
 8002e3a:	2264      	movs	r2, #100	; 0x64
 8002e3c:	fbb0 f1f2 	udiv	r1, r0, r2
 8002e40:	fb02 0311 	mls	r3, r2, r1, r0
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	3332      	adds	r3, #50	; 0x32
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	60a3      	str	r3, [r4, #8]
}
 8002e54:	b003      	add	sp, #12
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e58 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002e58:	6903      	ldr	r3, [r0, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002e5e:	6843      	ldr	r3, [r0, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002e62:	68d3      	ldr	r3, [r2, #12]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d029      	beq.n	8002ec2 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8002e6e:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8002e72:	f1dc 0300 	rsbs	r3, ip, #0
 8002e76:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002e7a:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002e7c:	6913      	ldr	r3, [r2, #16]
 8002e7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e86:	d01e      	beq.n	8002ec6 <uart_stm32_config_get+0x6e>
 8002e88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e8c:	d01d      	beq.n	8002eca <uart_stm32_config_get+0x72>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2303      	movne	r3, #3
 8002e94:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8002e96:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002e98:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002e9a:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8002e9c:	04c0      	lsls	r0, r0, #19
 8002e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea2:	d514      	bpl.n	8002ece <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2303      	movne	r3, #3
 8002eaa:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8002eac:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002eae:	6953      	ldr	r3, [r2, #20]
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8002eb4:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8002eb8:	4253      	negs	r3, r2
 8002eba:	4153      	adcs	r3, r2
 8002ebc:	71cb      	strb	r3, [r1, #7]
}
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	4770      	bx	lr
	switch (parity) {
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e7d9      	b.n	8002e7a <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e7e5      	b.n	8002e96 <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e7e3      	b.n	8002e96 <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2303      	moveq	r3, #3
 8002ed4:	2302      	movne	r3, #2
 8002ed6:	e7e9      	b.n	8002eac <uart_stm32_config_get+0x54>

08002ed8 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8002ed8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8002ede:	7903      	ldrb	r3, [r0, #4]
 8002ee0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	6805      	ldr	r5, [r0, #0]
 8002eea:	6814      	ldr	r4, [r2, #0]
 8002eec:	441d      	add	r5, r3
 8002eee:	42ac      	cmp	r4, r5
 8002ef0:	d902      	bls.n	8002ef8 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8002ef2:	f06f 0001 	mvn.w	r0, #1
}
 8002ef6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8002ef8:	7965      	ldrb	r5, [r4, #5]
 8002efa:	428d      	cmp	r5, r1
 8002efc:	d002      	beq.n	8002f04 <pinctrl_lookup_state+0x2c>
		(*state)++;
 8002efe:	3408      	adds	r4, #8
 8002f00:	6014      	str	r4, [r2, #0]
 8002f02:	e7f1      	b.n	8002ee8 <pinctrl_lookup_state+0x10>
			return 0;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e7f6      	b.n	8002ef6 <pinctrl_lookup_state+0x1e>

08002f08 <z_device_state_init>:
}
 8002f08:	4770      	bx	lr

08002f0a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8002f0a:	b138      	cbz	r0, 8002f1c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8002f0c:	68c3      	ldr	r3, [r0, #12]
 8002f0e:	8818      	ldrh	r0, [r3, #0]
 8002f10:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002f14:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8002f18:	4258      	negs	r0, r3
 8002f1a:	4158      	adcs	r0, r3
}
 8002f1c:	4770      	bx	lr

08002f1e <arch_system_halt>:
	__asm__ volatile(
 8002f1e:	f04f 0210 	mov.w	r2, #16
 8002f22:	f3ef 8311 	mrs	r3, BASEPRI
 8002f26:	f382 8812 	msr	BASEPRI_MAX, r2
 8002f2a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8002f2e:	e7fe      	b.n	8002f2e <arch_system_halt+0x10>

08002f30 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002f30:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8002f32:	f7ff fff4 	bl	8002f1e <arch_system_halt>

08002f36 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460e      	mov	r6, r1
 8002f3c:	f04f 0310 	mov.w	r3, #16
 8002f40:	f3ef 8711 	mrs	r7, BASEPRI
 8002f44:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f48:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8002f4c:	f7ff fae2 	bl	8002514 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8002f50:	4631      	mov	r1, r6
 8002f52:	4604      	mov	r4, r0
 8002f54:	4628      	mov	r0, r5
 8002f56:	f7ff ffeb 	bl	8002f30 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002f5a:	f387 8811 	msr	BASEPRI, r7
 8002f5e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002f62:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8002f64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f68:	f7fe b8ee 	b.w	8001148 <z_impl_k_thread_abort>

08002f6c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8002f6c:	b508      	push	{r3, lr}
	__asm__ volatile(
 8002f6e:	f04f 0210 	mov.w	r2, #16
 8002f72:	f3ef 8311 	mrs	r3, BASEPRI
 8002f76:	f382 8812 	msr	BASEPRI_MAX, r2
 8002f7a:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8002f7e:	f7fd feab 	bl	8000cd8 <arch_cpu_idle>
 8002f82:	e7f4      	b.n	8002f6e <idle+0x2>

08002f84 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8002f84:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8002f88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002f8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002f8c:	2300      	movs	r3, #0
	node->prev = NULL;
 8002f8e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8002f92:	4770      	bx	lr

08002f94 <unpend_thread_no_timeout>:
{
 8002f94:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002f96:	f7ff fff5 	bl	8002f84 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002f9a:	7b43      	ldrb	r3, [r0, #13]
 8002f9c:	f023 0302 	bic.w	r3, r3, #2
 8002fa0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	6083      	str	r3, [r0, #8]
}
 8002fa6:	bd08      	pop	{r3, pc}

08002fa8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b920      	cbnz	r0, 8002fb6 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fac:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8002fb0:	b90a      	cbnz	r2, 8002fb6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8002fb2:	f7fd beef 	b.w	8000d94 <arch_swap>
	__asm__ volatile(
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
}
 8002fbe:	4770      	bx	lr

08002fc0 <z_reschedule_unlocked>:
	__asm__ volatile(
 8002fc0:	f04f 0310 	mov.w	r3, #16
 8002fc4:	f3ef 8011 	mrs	r0, BASEPRI
 8002fc8:	f383 8812 	msr	BASEPRI_MAX, r3
 8002fcc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8002fd0:	f7ff bfea 	b.w	8002fa8 <z_reschedule_irqlock>

08002fd4 <z_priq_dumb_best>:
{
 8002fd4:	4603      	mov	r3, r0
	return list->head == list;
 8002fd6:	6800      	ldr	r0, [r0, #0]
}
 8002fd8:	4283      	cmp	r3, r0
 8002fda:	bf08      	it	eq
 8002fdc:	2000      	moveq	r0, #0
 8002fde:	4770      	bx	lr

08002fe0 <z_ready_thread>:
{
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	f04f 0310 	mov.w	r3, #16
 8002fe6:	f3ef 8411 	mrs	r4, BASEPRI
 8002fea:	f383 8812 	msr	BASEPRI_MAX, r3
 8002fee:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8002ff2:	f7ff f929 	bl	8002248 <ready_thread>
	__asm__ volatile(
 8002ff6:	f384 8811 	msr	BASEPRI, r4
 8002ffa:	f3bf 8f6f 	isb	sy
}
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <z_thread_timeout>:
{
 8003000:	b510      	push	{r4, lr}
 8003002:	4601      	mov	r1, r0
	__asm__ volatile(
 8003004:	f04f 0310 	mov.w	r3, #16
 8003008:	f3ef 8411 	mrs	r4, BASEPRI
 800300c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003010:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8003014:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8003018:	f013 0f28 	tst.w	r3, #40	; 0x28
 800301c:	d10d      	bne.n	800303a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800301e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003022:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8003024:	b10b      	cbz	r3, 800302a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8003026:	f7ff ffb5 	bl	8002f94 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800302a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800302e:	f023 0314 	bic.w	r3, r3, #20
 8003032:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8003036:	f7ff f907 	bl	8002248 <ready_thread>
	__asm__ volatile(
 800303a:	f384 8811 	msr	BASEPRI, r4
 800303e:	f3bf 8f6f 	isb	sy
}
 8003042:	bd10      	pop	{r4, pc}

08003044 <z_abort_timeout>:
{
 8003044:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003046:	f04f 0210 	mov.w	r2, #16
 800304a:	f3ef 8411 	mrs	r4, BASEPRI
 800304e:	f382 8812 	msr	BASEPRI_MAX, r2
 8003052:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	b13b      	cbz	r3, 800306a <z_abort_timeout+0x26>
			remove_timeout(to);
 800305a:	f7ff faff 	bl	800265c <remove_timeout>
			ret = 0;
 800305e:	2000      	movs	r0, #0
	__asm__ volatile(
 8003060:	f384 8811 	msr	BASEPRI, r4
 8003064:	f3bf 8f6f 	isb	sy
}
 8003068:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800306a:	f06f 0015 	mvn.w	r0, #21
 800306e:	e7f7      	b.n	8003060 <z_abort_timeout+0x1c>

08003070 <z_set_timeout_expiry>:
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
	__asm__ volatile(
 8003076:	f04f 0310 	mov.w	r3, #16
 800307a:	f3ef 8611 	mrs	r6, BASEPRI
 800307e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003082:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8003086:	f7ff fac1 	bl	800260c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800308a:	2801      	cmp	r0, #1
 800308c:	dd05      	ble.n	800309a <z_set_timeout_expiry+0x2a>
 800308e:	42a0      	cmp	r0, r4
 8003090:	db03      	blt.n	800309a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8003092:	4629      	mov	r1, r5
 8003094:	4620      	mov	r0, r4
 8003096:	f7fe fca1 	bl	80019dc <sys_clock_set_timeout>
	__asm__ volatile(
 800309a:	f386 8811 	msr	BASEPRI, r6
 800309e:	f3bf 8f6f 	isb	sy
}
 80030a2:	bd70      	pop	{r4, r5, r6, pc}

080030a4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 80030a4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 80030a6:	f7ff fbc9 	bl	800283c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 80030aa:	bd08      	pop	{r3, pc}
